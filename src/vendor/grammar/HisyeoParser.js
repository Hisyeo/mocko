// Generated from /run/media/jake/Windows/Users/madca/IdeaProjects/antlr-hisyeo/grammar/HisyeoParser.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import HisyeoParserListener from './HisyeoParserListener.js';
import HisyeoParserVisitor from './HisyeoParserVisitor.js';

const serializedATN = [4,1,884,328,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,3,0,66,8,0,1,0,1,0,1,0,
3,0,71,8,0,1,0,1,0,1,0,1,0,1,0,5,0,78,8,0,10,0,12,0,81,9,0,1,0,3,0,84,8,
0,1,1,1,1,1,2,1,2,5,2,90,8,2,10,2,12,2,93,9,2,1,2,3,2,96,8,2,1,2,3,2,99,
8,2,1,2,1,2,3,2,103,8,2,1,2,3,2,106,8,2,1,3,4,3,109,8,3,11,3,12,3,110,1,
3,3,3,114,8,3,1,4,1,4,1,4,1,4,5,4,120,8,4,10,4,12,4,123,9,4,1,5,1,5,1,5,
1,5,3,5,129,8,5,1,5,1,5,5,5,133,8,5,10,5,12,5,136,9,5,1,5,3,5,139,8,5,3,
5,141,8,5,1,6,3,6,144,8,6,1,6,1,6,1,6,5,6,149,8,6,10,6,12,6,152,9,6,1,6,
3,6,155,8,6,1,6,1,6,1,6,5,6,160,8,6,10,6,12,6,163,9,6,1,6,3,6,166,8,6,1,
6,1,6,1,6,3,6,171,8,6,1,6,3,6,174,8,6,1,6,3,6,177,8,6,1,6,3,6,180,8,6,1,
7,1,7,3,7,184,8,7,1,8,1,8,1,8,3,8,189,8,8,1,8,1,8,3,8,193,8,8,1,9,1,9,3,
9,197,8,9,1,10,3,10,200,8,10,1,10,4,10,203,8,10,11,10,12,10,204,1,10,3,10,
208,8,10,1,11,1,11,1,12,3,12,213,8,12,1,12,1,12,1,12,5,12,218,8,12,10,12,
12,12,221,9,12,3,12,223,8,12,1,12,3,12,226,8,12,1,12,1,12,5,12,230,8,12,
10,12,12,12,233,9,12,1,12,1,12,1,12,1,12,3,12,239,8,12,1,13,3,13,242,8,13,
1,13,1,13,5,13,246,8,13,10,13,12,13,249,9,13,1,14,1,14,3,14,253,8,14,1,14,
1,14,1,14,3,14,258,8,14,5,14,260,8,14,10,14,12,14,263,9,14,1,15,1,15,1,15,
1,15,1,15,1,15,3,15,271,8,15,1,16,1,16,3,16,275,8,16,1,16,1,16,3,16,279,
8,16,3,16,281,8,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
3,21,294,8,21,1,21,1,21,3,21,298,8,21,3,21,300,8,21,1,22,3,22,303,8,22,1,
22,1,22,1,23,3,23,308,8,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,173,0,32,0,2,4,6,8,10,
12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
60,62,0,15,2,0,5,6,8,8,19,0,31,31,48,48,59,59,89,89,107,107,127,127,141,
141,264,264,295,295,308,308,345,345,444,444,501,501,598,598,710,710,730,
730,736,736,764,764,826,826,2,0,90,90,500,500,3,0,53,53,175,175,643,643,
4,0,182,182,204,204,229,229,607,607,3,0,63,63,419,419,874,874,3,0,2,2,601,
601,874,874,12,0,24,24,58,58,75,75,89,89,345,345,450,450,538,538,626,626,
653,653,692,692,707,707,861,861,20,0,55,55,57,57,66,66,217,217,223,223,283,
283,304,304,307,307,310,310,405,405,461,461,482,482,513,513,517,517,545,
545,564,564,577,577,665,666,748,748,767,767,6,0,180,180,354,354,539,539,
639,639,827,827,829,829,12,0,26,26,35,35,49,49,105,105,347,347,504,504,543,
543,750,750,763,763,771,771,774,774,786,786,120,0,11,12,14,14,18,18,30,30,
34,34,36,38,41,41,56,56,77,77,83,83,85,85,95,95,106,106,115,115,118,118,
132,132,138,138,145,146,149,149,159,161,181,181,185,185,188,189,196,197,
203,203,216,216,225,225,246,246,248,248,252,252,255,255,257,257,279,279,
281,281,286,286,288,288,301,301,316,317,321,322,330,330,332,332,344,344,
346,346,356,356,360,360,362,362,364,366,369,370,375,376,378,378,380,380,
389,389,391,391,393,393,395,395,404,404,410,410,418,418,424,424,437,437,
443,443,446,448,462,462,466,466,476,476,480,480,485,485,487,490,496,496,
499,499,502,502,506,506,510,511,520,522,532,532,548,548,555,555,558,558,
561,562,580,580,582,583,588,588,590,592,596,596,606,606,614,614,616,616,
632,632,635,635,649,649,657,657,659,659,663,664,668,668,670,670,678,679,
685,685,687,687,699,699,701,701,725,725,741,741,743,743,768,768,778,778,
790,790,795,795,797,797,800,802,806,806,811,812,823,823,832,832,841,842,
852,852,855,855,866,866,876,876,882,882,884,884,210,0,13,13,16,17,20,20,
22,23,27,28,39,40,42,44,47,47,50,50,60,60,62,62,64,64,67,67,70,72,76,76,
78,78,80,80,82,82,84,84,87,88,91,91,94,94,97,97,99,99,102,102,104,104,108,
110,114,114,122,124,126,126,128,128,130,131,134,134,139,140,142,144,148,
148,151,152,154,154,156,156,162,162,165,166,168,170,172,173,186,187,190,
190,194,194,199,200,207,209,213,213,215,215,218,219,226,228,231,233,235,
242,244,245,249,249,251,251,260,260,265,265,268,270,272,275,278,278,280,
280,282,282,287,287,289,294,298,298,300,300,302,302,312,315,320,320,323,
323,325,326,328,328,336,336,340,340,343,343,349,350,352,352,357,359,363,
363,367,367,372,372,379,379,381,381,384,387,398,400,402,403,408,409,411,
413,415,415,417,417,421,423,426,430,432,432,436,436,438,438,441,442,445,
445,453,453,456,456,459,459,463,464,467,467,470,470,472,474,478,479,481,
481,483,484,493,493,495,495,497,498,503,503,505,505,507,507,509,509,515,
516,518,518,524,527,530,531,534,537,542,542,544,544,547,547,549,549,551,
551,553,554,557,557,559,560,563,563,565,566,569,571,581,581,584,585,587,
587,593,593,595,595,597,597,599,600,604,604,612,612,615,615,618,618,624,
624,627,630,633,633,638,638,641,642,644,644,646,646,650,651,654,654,662,
662,666,666,671,674,676,676,680,680,682,683,686,686,691,691,693,694,696,
697,706,706,709,709,711,712,714,715,717,719,724,724,726,726,728,729,731,
731,734,734,737,737,742,742,744,747,749,749,751,752,754,756,765,765,769,
770,776,777,780,780,782,782,784,785,789,789,792,794,796,796,799,799,803,
804,807,807,809,809,814,819,822,822,824,825,828,828,830,830,834,836,847,
847,849,851,853,854,856,856,859,859,862,862,864,865,869,869,871,871,873,
873,875,875,878,879,883,883,192,0,15,15,19,19,21,21,25,25,29,29,32,33,45,
46,51,52,65,65,68,69,73,74,79,79,81,81,86,86,92,93,96,96,98,98,100,101,103,
103,111,113,116,116,119,121,125,125,129,129,133,133,135,137,147,147,150,
150,153,153,155,155,157,158,163,164,167,167,171,171,174,174,176,179,183,
184,191,193,195,195,198,198,201,202,205,206,210,212,214,214,220,222,224,
224,230,230,234,234,243,243,247,247,250,250,253,254,256,256,258,259,261,
263,266,267,271,271,276,277,284,285,296,297,299,299,303,303,305,306,309,
309,311,311,318,319,324,324,327,327,329,329,331,331,333,335,337,339,341,
342,348,348,351,351,353,353,355,355,361,361,368,368,371,371,373,374,377,
377,382,383,388,388,390,390,392,392,394,394,396,397,401,401,406,407,414,
414,416,416,420,420,425,425,431,431,433,435,439,440,449,449,451,452,455,
455,457,458,460,460,465,465,468,469,471,471,475,475,477,477,486,486,491,
492,494,494,508,508,512,512,514,514,519,519,523,523,528,529,533,533,540,
541,546,546,550,550,552,552,556,556,567,568,572,576,578,579,586,586,589,
589,594,594,602,603,605,605,608,608,610,611,613,613,617,617,619,623,625,
625,631,631,636,637,640,640,645,645,647,648,652,653,655,656,658,658,660,
661,667,667,669,669,675,675,677,677,681,681,684,684,688,690,695,695,698,
698,700,700,702,705,708,708,713,713,716,716,720,723,727,727,732,733,735,
735,738,740,753,753,757,762,766,766,772,773,775,775,779,779,781,781,783,
783,787,788,791,791,798,798,805,805,808,808,810,810,813,813,820,821,831,
831,833,833,837,839,844,846,848,848,857,858,860,860,863,863,867,867,870,
870,872,872,880,881,5,0,61,61,117,117,609,609,840,840,868,868,357,0,65,1,
0,0,0,2,85,1,0,0,0,4,105,1,0,0,0,6,108,1,0,0,0,8,115,1,0,0,0,10,140,1,0,
0,0,12,179,1,0,0,0,14,183,1,0,0,0,16,192,1,0,0,0,18,196,1,0,0,0,20,207,1,
0,0,0,22,209,1,0,0,0,24,238,1,0,0,0,26,241,1,0,0,0,28,252,1,0,0,0,30,270,
1,0,0,0,32,280,1,0,0,0,34,282,1,0,0,0,36,285,1,0,0,0,38,287,1,0,0,0,40,289,
1,0,0,0,42,299,1,0,0,0,44,302,1,0,0,0,46,307,1,0,0,0,48,311,1,0,0,0,50,313,
1,0,0,0,52,315,1,0,0,0,54,317,1,0,0,0,56,319,1,0,0,0,58,321,1,0,0,0,60,323,
1,0,0,0,62,325,1,0,0,0,64,66,5,7,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,67,1,
0,0,0,67,79,3,4,2,0,68,70,3,2,1,0,69,71,5,7,0,0,70,69,1,0,0,0,70,71,1,0,
0,0,71,72,1,0,0,0,72,73,3,4,2,0,73,78,1,0,0,0,74,75,3,62,31,0,75,76,3,6,
3,0,76,78,1,0,0,0,77,68,1,0,0,0,77,74,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,
0,79,80,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,82,84,3,2,1,0,83,82,1,0,0,0,
83,84,1,0,0,0,84,1,1,0,0,0,85,86,7,0,0,0,86,3,1,0,0,0,87,91,3,8,4,0,88,90,
3,10,5,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,95,1,
0,0,0,93,91,1,0,0,0,94,96,3,52,26,0,95,94,1,0,0,0,95,96,1,0,0,0,96,106,1,
0,0,0,97,99,3,62,31,0,98,97,1,0,0,0,98,99,1,0,0,0,99,100,1,0,0,0,100,102,
3,6,3,0,101,103,3,52,26,0,102,101,1,0,0,0,102,103,1,0,0,0,103,106,1,0,0,
0,104,106,3,40,20,0,105,87,1,0,0,0,105,98,1,0,0,0,105,104,1,0,0,0,106,5,
1,0,0,0,107,109,3,10,5,0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,
110,111,1,0,0,0,111,113,1,0,0,0,112,114,3,52,26,0,113,112,1,0,0,0,113,114,
1,0,0,0,114,7,1,0,0,0,115,121,3,24,12,0,116,117,3,62,31,0,117,118,3,28,14,
0,118,120,1,0,0,0,119,116,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,
1,0,0,0,122,9,1,0,0,0,123,121,1,0,0,0,124,125,3,22,11,0,125,126,3,28,14,
0,126,141,1,0,0,0,127,129,3,36,18,0,128,127,1,0,0,0,128,129,1,0,0,0,129,
130,1,0,0,0,130,134,3,18,9,0,131,133,3,38,19,0,132,131,1,0,0,0,133,136,1,
0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,137,
139,3,28,14,0,138,137,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,124,1,
0,0,0,140,128,1,0,0,0,141,11,1,0,0,0,142,144,5,54,0,0,143,142,1,0,0,0,143,
144,1,0,0,0,144,145,1,0,0,0,145,154,5,877,0,0,146,150,3,14,7,0,147,149,3,
12,6,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,
155,1,0,0,0,152,150,1,0,0,0,153,155,3,16,8,0,154,146,1,0,0,0,154,153,1,0,
0,0,155,180,1,0,0,0,156,165,5,54,0,0,157,161,3,30,15,0,158,160,3,12,6,0,
159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,166,
1,0,0,0,163,161,1,0,0,0,164,166,3,16,8,0,165,157,1,0,0,0,165,164,1,0,0,0,
166,180,1,0,0,0,167,180,3,30,15,0,168,173,3,16,8,0,169,171,3,52,26,0,170,
169,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,174,5,4,0,0,173,174,1,0,
0,0,173,170,1,0,0,0,174,180,1,0,0,0,175,177,5,54,0,0,176,175,1,0,0,0,176,
177,1,0,0,0,177,178,1,0,0,0,178,180,5,3,0,0,179,143,1,0,0,0,179,156,1,0,
0,0,179,167,1,0,0,0,179,168,1,0,0,0,179,176,1,0,0,0,180,13,1,0,0,0,181,184,
3,30,15,0,182,184,3,56,28,0,183,181,1,0,0,0,183,182,1,0,0,0,184,15,1,0,0,
0,185,186,5,634,0,0,186,188,3,4,2,0,187,189,3,22,11,0,188,187,1,0,0,0,188,
189,1,0,0,0,189,193,1,0,0,0,190,191,5,454,0,0,191,193,3,6,3,0,192,185,1,
0,0,0,192,190,1,0,0,0,193,17,1,0,0,0,194,197,3,56,28,0,195,197,5,843,0,0,
196,194,1,0,0,0,196,195,1,0,0,0,197,19,1,0,0,0,198,200,3,48,24,0,199,198,
1,0,0,0,199,200,1,0,0,0,200,202,1,0,0,0,201,203,3,50,25,0,202,201,1,0,0,
0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,208,1,0,0,0,206,208,
3,48,24,0,207,199,1,0,0,0,207,206,1,0,0,0,208,21,1,0,0,0,209,210,7,1,0,0,
210,23,1,0,0,0,211,213,3,20,10,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,
1,0,0,0,214,222,3,16,8,0,215,219,5,4,0,0,216,218,3,12,6,0,217,216,1,0,0,
0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,223,1,0,0,0,221,219,
1,0,0,0,222,215,1,0,0,0,222,223,1,0,0,0,223,239,1,0,0,0,224,226,3,20,10,
0,225,224,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,231,3,30,15,0,228,
230,3,12,6,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,
0,0,232,239,1,0,0,0,233,231,1,0,0,0,234,235,5,9,0,0,235,236,3,0,0,0,236,
237,5,10,0,0,237,239,1,0,0,0,238,212,1,0,0,0,238,225,1,0,0,0,238,234,1,0,
0,0,239,25,1,0,0,0,240,242,3,20,10,0,241,240,1,0,0,0,241,242,1,0,0,0,242,
243,1,0,0,0,243,247,3,56,28,0,244,246,3,12,6,0,245,244,1,0,0,0,246,249,1,
0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,27,1,0,0,0,249,247,1,0,0,0,250,
253,3,24,12,0,251,253,3,26,13,0,252,250,1,0,0,0,252,251,1,0,0,0,253,261,
1,0,0,0,254,257,3,62,31,0,255,258,3,24,12,0,256,258,3,26,13,0,257,255,1,
0,0,0,257,256,1,0,0,0,258,260,1,0,0,0,259,254,1,0,0,0,260,263,1,0,0,0,261,
259,1,0,0,0,261,262,1,0,0,0,262,29,1,0,0,0,263,261,1,0,0,0,264,271,3,54,
27,0,265,271,3,48,24,0,266,271,3,50,25,0,267,271,3,44,22,0,268,271,3,34,
17,0,269,271,3,46,23,0,270,264,1,0,0,0,270,265,1,0,0,0,270,266,1,0,0,0,270,
267,1,0,0,0,270,268,1,0,0,0,270,269,1,0,0,0,271,31,1,0,0,0,272,274,7,2,0,
0,273,275,7,3,0,0,274,273,1,0,0,0,274,275,1,0,0,0,275,281,1,0,0,0,276,278,
7,3,0,0,277,279,7,2,0,0,278,277,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,
280,272,1,0,0,0,280,276,1,0,0,0,281,33,1,0,0,0,282,283,3,32,16,0,283,284,
3,56,28,0,284,35,1,0,0,0,285,286,7,4,0,0,286,37,1,0,0,0,287,288,7,5,0,0,
288,39,1,0,0,0,289,290,7,6,0,0,290,41,1,0,0,0,291,293,7,2,0,0,292,294,7,
3,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,300,1,0,0,0,295,297,7,3,0,0,296,
298,7,2,0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,291,1,0,
0,0,299,295,1,0,0,0,300,43,1,0,0,0,301,303,3,42,21,0,302,301,1,0,0,0,302,
303,1,0,0,0,303,304,1,0,0,0,304,305,3,58,29,0,305,45,1,0,0,0,306,308,3,42,
21,0,307,306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,310,3,60,30,0,310,
47,1,0,0,0,311,312,7,7,0,0,312,49,1,0,0,0,313,314,7,8,0,0,314,51,1,0,0,0,
315,316,7,9,0,0,316,53,1,0,0,0,317,318,7,10,0,0,318,55,1,0,0,0,319,320,7,
11,0,0,320,57,1,0,0,0,321,322,7,12,0,0,322,59,1,0,0,0,323,324,7,13,0,0,324,
61,1,0,0,0,325,326,7,14,0,0,326,63,1,0,0,0,53,65,70,77,79,83,91,95,98,102,
105,110,113,121,128,134,138,140,143,150,154,161,165,170,173,176,179,183,
188,192,196,199,204,207,212,219,222,225,231,238,241,247,252,257,261,270,
274,278,280,293,297,299,302,307];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class HisyeoParser extends antlr4.Parser {

    static grammarFileName = "HisyeoParser.g4";
    static literalNames = [ null, null, "'oiyo'", null, "','", null, null, 
                            "'\\u00BF'", "'?'", null, null, "'o\\u00FBt\\u00F4'", 
                            "'ok\\u00FBlo'", "'o\\u00FBd\\u00EE'", "'ok\\u00F4t'", 
                            "'oks\\u00EE\\u00F4s'", "'oklumun'", "'oks\\u00FBn'", 
                            "'ogolol'", "'ogog\\u00EA'", "'oc\\u00FBo'", 
                            "'ot\\u00F4s'", "'okoxu'", "'ostok'", "'odigon'", 
                            "'osyen'", "'oz\\u00FBul'", "'obok\\u00EE'", 
                            "'ob\\u00F4'", "'obunyun'", "'ob\\u00FBl\\u00FB'", 
                            "'ofek'", "'of\\u00EEn\\u00EA'", "'om\\u00FBlto'", 
                            "'onk\\u00FBol'", "'on\\u00F4'", "'onkonu'", 
                            "'onc\\u00EAmon'", "'ondo'", "'ong\\u00F4l\\u00F4'", 
                            "'\\u00F4h\\u00EAl'", "'\\u00F4\\u00EEtun'", 
                            "'onwon\\u00EE'", "'\\u00F4ts\\u00F4tot'", "'onf\\u00EEb\\u00EE'", 
                            "'\\u00F4s\\u00F4l\\u00EA'", "'olt\\u00FB'", 
                            "'\\u00F4st\\u00EE'", "'oldis'", "'\\u00F4fo'", 
                            "'\\u00F4z\\u00EEl'", "'\\u00F4don'", "'\\u00F4bok'", 
                            "'\\u00F4n\\u00EE'", "'et'", "'eson'", "'\\u00F4nt\\u00F4n'", 
                            "'\\u00F4nsu'", "'eswen'", "'\\u00F4l\\u00EA'", 
                            "'eloi'", "'en'", "'elek\\u00EA'", "'\\u00EAo'", 
                            "'\\u00EAts\\u00F4'", "'elent\\u00EAt'", "'elf\\u00FB'", 
                            "'\\u00EAb\\u00F4l'", "'\\u00EAm\\u00EA'", "'\\u00EAfun'", 
                            "'itihos'", "'\\u00EAnbukun'", "'\\u00EAnk\\u00F4m\\u00F4n'", 
                            "'\\u00EAl\\u00EAo'", "'isbulyol'", "'\\u00EAto'", 
                            "'\\u00EEc\\u00EEw\\u00FB'", "'\\u00EEcwon'", 
                            "'istihol'", "'iwot\\u00EA'", "'\\u00EEs\\u00EAns\\u00F4'", 
                            "'infult\\u00EEn'", "'\\u00EEsb\\u00F4nxu'", 
                            "'\\u00EEsk\\u00F4'", "'\\u00EEx\\u00F4l\\u00F4'", 
                            "'\\u00EEmon'", "'\\u00EEb\\u00FBd\\u00FB'", 
                            "'\\u00EEs\\u00EEb\\u00F4'", "'\\u00EEb\\u00FBw\\u00EA'", 
                            "'ilik'", "'\\u00EEn'", "'\\u00EEbol\\u00EA'", 
                            "'uklo'", "'us\\u00FBndul'", "'\\u00EEnbol\\u00EE'", 
                            "'usk\\u00EEfo'", "'ub\\u00F4lni'", "'\\u00EEl\\u00EA'", 
                            "'\\u00EElx\\u00EEzuk'", "'umo'", "'ub\\u00EAnus'", 
                            "'uf\\u00FBl\\u00EEt'", "'undof\\u00F4l'", "'unbol'", 
                            "'uyo'", "'uly\\u00F4'", "'unon'", "'\\u00FB'", 
                            "'unb\\u00FB'", "'\\u00FBs\\u00EAn'", "'\\u00FBc\\u00FBm\\u00EE'", 
                            "'\\u00FBsowo'", "'\\u00FBtok'", "'\\u00FBmom\\u00EE'", 
                            "'\\u00FBsmon'", "'\\u00FBsl\\u00EAk'", "'\\u00FBn\\u00EEd\\u00FB'", 
                            "'\\u00FBn'", "'\\u00FBnhilun'", "'\\u00FBnco\\u00EE'", 
                            "'\\u00FBlk\\u00EAf\\u00EE'", "'\\u00FBlg\\u00FBk\\u00EEn'", 
                            "'\\u00FBlonf\\u00FB'", "'\\u00FBl\\u00F4gun'", 
                            "'\\u00FBnf\\u00FBn\\u00F4'", "'hok\\u00EEk\\u00EE'", 
                            "'\\u00FBlzo'", "'ho\\u00EE'", "'hok\\u00F4l\\u00EE'", 
                            "'hok\\u00FBxi'", "'hoso\\u00FBn'", "'hoxob\\u00EA'", 
                            "'hob\\u00EEy\\u00F4'", "'hom\\u00FBs'", "'hondon'", 
                            "'ho\\u00F4s'", "'hos\\u00EEn'", "'hond\\u00F4t'", 
                            "'hofo'", "'h\\u00F4ktun'", "'h\\u00F4fez\\u00EE'", 
                            "'h\\u00F4n'", "'h\\u00F4nc\\u00F4\\u00FB'", 
                            "'h\\u00F4l\\u00FBk'", "'h\\u00F4lmo'", "'h\\u00F4d\\u00F4k\\u00FB'", 
                            "'h\\u00EAf\\u00EEn'", "'henond\\u00EA'", "'h\\u00F4nyo'", 
                            "'helgo'", "'h\\u00EAlxun'", "'h\\u00EAn\\u00EAl\\u00F4'", 
                            "'hitsu'", "'h\\u00EEtn\\u00F4d\\u00EAt'", "'h\\u00EEsmo'", 
                            "'h\\u00EEzon'", "'hunz\\u00EEd\\u00FB'", "'hul\\u00FBk\\u00F4'", 
                            "'h\\u00FBunhu'", "'h\\u00FBk\\u00EA'", "'h\\u00FBkun'", 
                            "'h\\u00FBsku'", "'h\\u00FBstun'", "'h\\u00FBdul'", 
                            "'h\\u00FBnsik'", "'h\\u00FBzon'", "'h\\u00FBns\\u00FBon'", 
                            "'h\\u00EEy\\u00F4l\\u00EE'", "'h\\u00FBwuncul'", 
                            "'h\\u00FBwu'", "'h\\u00EEsk\\u00FBnco'", "'hiklihos'", 
                            "'h\\u00FBlod\\u00EAk'", "'h\\u00FBl\\u00FB'", 
                            "'kocko'", "'kon'", "'kotilmok'", "'kob\\u00FBt'", 
                            "'kotonhon'", "'konxo'", "'ko'", "'kontol'", 
                            "'k\\u00F4\\u00EE'", "'konbokbo'", "'konwo'", 
                            "'k\\u00F4to'", "'kolowu'", "'k\\u00F4kok\\u00FB'", 
                            "'k\\u00F4s'", "'k\\u00F4son'", "'k\\u00F4tf\\u00FBsu'", 
                            "'k\\u00F4xent\\u00EA'", "'k\\u00F4t\\u00EEk\\u00F4l'", 
                            "'k\\u00F4n\\u00EAn'", "'k\\u00F4m\\u00FB'", 
                            "'k\\u00F4dus'", "'k\\u00F4ndod\\u00FB'", "'k\\u00F4nt\\u00EAsto'", 
                            "'k\\u00F4ndons\\u00EA'", "'k\\u00F4lm\\u00FBdul'", 
                            "'k\\u00F4sm\\u00F4'", "'k\\u00F4ny\\u00EAc'", 
                            "'k\\u00F4nbo'", "'kelo'", "'ke'", "'k\\u00EAsk\\u00EEn'", 
                            "'k\\u00EAx\\u00EEk'", "'k\\u00EAl\\u00F4s'", 
                            "'k\\u00EE\\u00FBng\\u00F4'", "'kistos\\u00EA'", 
                            "'k\\u00EEk\\u00F4l\\u00F4'", "'k\\u00EE\\u00F4s\\u00F4'", 
                            "'kiluk\\u00FB'", "'k\\u00EEsk\\u00F4'", "'k\\u00EEn\\u00F4x\\u00EE'", 
                            "'k\\u00EEno'", "'k\\u00EEso'", "'k\\u00EEns\\u00EA'", 
                            "'ku\\u00FBnm\\u00EA'", "'k\\u00EEnyosel'", 
                            "'k\\u00EEnlik'", "'k\\u00EEldo'", "'k\\u00EEy\\u00F4'", 
                            "'kut'", "'kutin'", "'kud\\u00FBdo'", "'kukwon'", 
                            "'k\\u00FBon'", "'k\\u00FB\\u00F4cyo'", "'k\\u00FBu'", 
                            "'k\\u00FBonl\\u00F4n'", "'k\\u00FBkmut'", "'k\\u00FBsow\\u00EE'", 
                            "'k\\u00FBnont\\u00EE'", "'k\\u00FBzo\\u00FB'", 
                            "'k\\u00FBdu'", "'k\\u00FBmun'", "'k\\u00FB\\u00F4xi'", 
                            "'k\\u00FBnh\\u00EEun'", "'k\\u00FBnc\\u00EEen'", 
                            "'k\\u00FBng\\u00EEyo'", "'k\\u00FBnb\\u00EE'", 
                            "'k\\u00FBld\\u00FB'", "'gos\\u00EEl'", "'gos'", 
                            "'k\\u00FBl\\u00FBnun'", "'gom\\u00EE'", "'k\\u00FBy\\u00F4'", 
                            "'gon\\u00EEso'", "'gonbu'", "'gonz\\u00EEl'", 
                            "'gongox\\u00EE'", "'golo'", "'golfon'", "'golbin\\u00FBs'", 
                            "'golun'", "'g\\u00F4'", "'g\\u00F4c\\u00EEdon'", 
                            "'g\\u00F4nyumon'", "'g\\u00F4wo'", "'g\\u00F4yu'", 
                            "'gemolen'", "'g\\u00F4l\\u00FBo'", "'gelmis'", 
                            "'gitno'", "'g\\u00EAk\\u00F4'", "'g\\u00EE\\u00F4n'", 
                            "'g\\u00EEk'", "'g\\u00EEto'", "'gubuyo'", "'g\\u00EEsg\\u00FBl'", 
                            "'gufis'", "'g\\u00FB\\u00EAy\\u00FB'", "'g\\u00FBexo'", 
                            "'gundol\\u00EA'", "'g\\u00FBdol\\u00F4'", "'g\\u00FBso'", 
                            "'g\\u00FBnokol'", "'g\\u00FBm\\u00EE'", "'g\\u00FBwolo'", 
                            "'g\\u00FBfox\\u00EA'", "'g\\u00FBf\\u00EE\\u00F4'", 
                            "'g\\u00FBl\\u00FB'", "'to\\u00FB'", "'g\\u00FBlob\\u00EE'", 
                            "'totsi'", "'to\\u00FByen'", "'tohil\\u00F4k'", 
                            "'tosw\\u00EEl'", "'toliyo'", "'tow\\u00EA'", 
                            "'tonbokcut'", "'tol\\u00EAn'", "'tol\\u00EEko'", 
                            "'tolx\\u00EAto'", "'t\\u00F4'", "'t\\u00F4c\\u00EEt'", 
                            "'t\\u00F4nco\\u00EE'", "'t\\u00F4m\\u00F4s'", 
                            "'t\\u00F4lk\\u00EE'", "'t\\u00F4x\\u00FBtsi'", 
                            "'tenk\\u00EEn'", "'tet\\u00EAk'", "'tigoyo'", 
                            "'tel\\u00F4'", "'tif\\u00FBlci'", "'t\\u00F4nk\\u00F4'", 
                            "'t\\u00EE\\u00FB'", "'til'", "'t\\u00EEk\\u00FB'", 
                            "'tukwos'", "'t\\u00EEk\\u00EAl'", "'t\\u00EEx\\u00F4'", 
                            "'tub\\u00F4'", "'t\\u00EEton'", "'t\\u00EEm\\u00EEok'", 
                            "'tuluti'", "'t\\u00FBek'", "'tulkolyun'", "'t\\u00FBt'", 
                            "'t\\u00FBnd\\u00FB'", "'t\\u00FBu'", "'t\\u00FBlokon'", 
                            "'t\\u00FBl\\u00F4no'", "'cok'", "'comen'", 
                            "'cokwoli'", "'cokyen'", "'con\\u00F4\\u00EE'", 
                            "'cosn\\u00EE'", "'conw\\u00EAbo'", "'colot'", 
                            "'c\\u00F4\\u00FBfon'", "'conzodo'", "'c\\u00F4t'", 
                            "'c\\u00F4\\u00FBnton'", "'c\\u00F4cko'", "'c\\u00F4m\\u00EAl'", 
                            "'c\\u00F4nk\\u00F4k'", "'centik'", "'c\\u00EA\\u00F4'", 
                            "'cenc\\u00EE'", "'c\\u00EAnb\\u00F4'", "'c\\u00EAn'", 
                            "'cix\\u00EEn'", "'cih\\u00F4\\u00FB'", "'cif\\u00FB'", 
                            "'ciz\\u00EE'", "'cifulo'", "'cino'", "'cing\\u00EE'", 
                            "'cin\\u00F4bu'", "'ciw\\u00EEnd\\u00EE'", "'c\\u00EEes'", 
                            "'c\\u00EE'", "'c\\u00EEenx\\u00EEn'", "'c\\u00EEhun'", 
                            "'c\\u00EEk\\u00EEn\\u00EEl'", "'c\\u00EEbon'", 
                            "'c\\u00EEg\\u00EElsu'", "'c\\u00EEts\\u00EA'", 
                            "'c\\u00EEnzon'", "'c\\u00EEnl\\u00EE'", "'cusk\\u00EEd\\u00F4'", 
                            "'cukto'", "'cunl\\u00EE\\u00FB'", "'cunc\\u00EEon'", 
                            "'c\\u00FBonwun'", "'cuny\\u00FB'", "'cutn\\u00EA'", 
                            "'culono'", "'c\\u00FBt\\u00EE'", "'c\\u00FB\\u00EE'", 
                            "'c\\u00FBb\\u00FB'", "'c\\u00FBx\\u00EEen'", 
                            "'c\\u00FBdo'", "'c\\u00FBfo'", "'c\\u00FBnf\\u00FB'", 
                            "'c\\u00FBngo'", "'c\\u00FBnd\\u00F4l'", "'c\\u00FBlosun'", 
                            "'sokof\\u00FB'", "'soho\\u00FB'", "'sokol'", 
                            "'c\\u00FBlc\\u00EE'", "'sotn\\u00EEn'", "'c\\u00FBl\\u00FBl'", 
                            "'soden'", "'sodolun'", "'socok'", "'sodil\\u00FB'", 
                            "'sob\\u00F4l\\u00EA'", "'sob\\u00FBn\\u00EE'", 
                            "'sobis'", "'sonkon'", "'somo'", "'sof\\u00EEn'", 
                            "'sont\\u00EE'", "'sol\\u00EElo'", "'solw\\u00F4c'", 
                            "'s\\u00F4t\\u00FBn'", "'s\\u00F4ns\\u00FBs'", 
                            "'s\\u00F4ho\\u00FBk'", "'s\\u00F4bo'", "'s\\u00F4l\\u00FB'", 
                            "'ses'", "'s\\u00F4ndon\\u00F4s'", "'s\\u00F4lt\\u00FBstik'", 
                            "'senwic'", "'s\\u00EAk\\u00EE'", "'sel\\u00F4h\\u00F4'", 
                            "'s\\u00EAdu'", "'s\\u00EAmoi'", "'s\\u00EAk\\u00EEton'", 
                            "'s\\u00EAlb\\u00F4'", "'siskin'", "'s\\u00EAnz\\u00F4'", 
                            "'s\\u00EAl'", "'sityo'", "'s\\u00EE'", "'s\\u00EEokb\\u00EE'", 
                            "'s\\u00EE\\u00EAt\\u00F4'", "'sins\\u00EE'", 
                            "'s\\u00EEkot'", "'s\\u00EE\\u00FBfo'", "'s\\u00EEn\\u00EAx\\u00EEs'", 
                            "'s\\u00EEntokmo'", "'s\\u00EEk\\u00EEn'", "'suhot'", 
                            "'sukyunik'", "'sufo\\u00FBn'", "'sumon'", "'sund\\u00EEbot'", 
                            "'sunb\\u00FBlno'", "'sunyotn\\u00EE'", "'s\\u00FB\\u00EEt'", 
                            "'s\\u00FBt\\u00FB\\u00F4'", "'s\\u00FB\\u00F4xic'", 
                            "'s\\u00FBs\\u00F4n'", "'xo\\u00EEnbo'", "'s\\u00FBb\\u00F4l'", 
                            "'xohofec'", "'s\\u00FBnb\\u00EEd\\u00FB'", 
                            "'s\\u00FBko'", "'s\\u00FBn'", "'xof\\u00F4'", 
                            "'xok\\u00FBl\\u00FB'", "'xobo'", "'xont\\u00FBn'", 
                            "'xob\\u00EAk'", "'xok\\u00F4n'", "'xonluk'", 
                            "'x\\u00F4bo\\u00EE'", "'x\\u00F4m\\u00FBtl\\u00F4'", 
                            "'xe'", "'xowos\\u00EA'", "'xolu'", "'xec\\u00EEnoc'", 
                            "'xolx\\u00EEl\\u00EE'", "'xem\\u00EAtsen'", 
                            "'x\\u00F4n'", "'x\\u00EAt\\u00EE'", "'xef\\u00EEzec'", 
                            "'xing\\u00F4'", "'xifon'", "'x\\u00EAnt\\u00EEl'", 
                            "'x\\u00EE\\u00FBf\\u00FB'", "'x\\u00EE\\u00FBlo'", 
                            "'x\\u00EEk\\u00F4'", "'x\\u00EEd\\u00EAtl\\u00EE'", 
                            "'x\\u00EExulko'", "'x\\u00EEs\\u00FB'", "'x\\u00EEmol'", 
                            "'x\\u00EEnc\\u00FBon'", "'x\\u00EEmu'", "'xulmindo'", 
                            "'x\\u00EEwon'", "'x\\u00EEy\\u00F4c\\u00FB'", 
                            "'x\\u00FBto'", "'x\\u00FBk'", "'x\\u00FBsten'", 
                            "'do\\u00EE'", "'x\\u00FBnyu'", "'x\\u00FBxok'", 
                            "'do\\u00EEnb\\u00EE'", "'doho'", "'doh\\u00EEl'", 
                            "'do\\u00EEc\\u00EAl'", "'dokdogo'", "'dod\\u00F4\\u00FB'", 
                            "'dokn\\u00FB'", "'dondun'", "'d\\u00F4kcon'", 
                            "'d\\u00F4n\\u00FBs'", "'dod\\u00EA'", "'d\\u00F4cu\\u00EE'", 
                            "'d\\u00F4stoc'", "'d\\u00F4n\\u00FBxin'", "'deku'", 
                            "'d\\u00EAko'", "'d\\u00EAs'", "'d\\u00EAn'", 
                            "'d\\u00EE'", "'dibo'", "'d\\u00EEzel'", "'d\\u00EAto\\u00EE'", 
                            "'d\\u00EAn\\u00EAm\\u00EAk'", "'d\\u00EEnc\\u00EE'", 
                            "'d\\u00EEd\\u00F4z\\u00FB'", "'d\\u00EEnzo\\u00FB'", 
                            "'d\\u00EEyond\\u00EA'", "'du\\u00FBhon'", "'d\\u00EEl\\u00EA'", 
                            "'dus'", "'dukw\\u00EAlit'", "'dumoko'", "'duw\\u00F4n\\u00EE'", 
                            "'d\\u00FB\\u00EE'", "'d\\u00FBunc\\u00EEt'", 
                            "'d\\u00FBsul'", "'d\\u00FBbono'", "'d\\u00FBstu'", 
                            "'d\\u00FBngo'", "'d\\u00FBndon'", "'zoso'", 
                            "'zomo'", "'zoston'", "'zom\\u00EE'", "'zon\\u00FBb\\u00EE'", 
                            "'zom\\u00FBn\\u00EE'", "'zonwul'", "'zowo'", 
                            "'zoh\\u00EEt'", "'z\\u00F4\\u00EE'", "'zolon\\u00EE'", 
                            "'z\\u00F4h\\u00FBn'", "'zol\\u00EE'", "'z\\u00F4goc'", 
                            "'z\\u00F4t\\u00EAst\\u00F4'", "'ze'", "'zelen'", 
                            "'z\\u00EAns\\u00EE'", "'z\\u00EAsto'", "'zik'", 
                            "'zizime'", "'ziy\\u00F4n'", "'z\\u00EEg\\u00EEl'", 
                            "'zinkon'", "'z\\u00EEco\\u00FB'", "'z\\u00EEx\\u00EEt\\u00FB'", 
                            "'z\\u00EEngu'", "'z\\u00EEz\\u00EEyo'", "'z\\u00EEwit'", 
                            "'zuko'", "'zusbot'", "'zuwob\\u00FB'", "'z\\u00EElyo\\u00EEs'", 
                            "'z\\u00FBng\\u00F4'", "'z\\u00FBt\\u00F4'", 
                            "'z\\u00FBnt\\u00FBlu'", "'z\\u00FBhu'", "'z\\u00FByi'", 
                            "'bo\\u00EEf\\u00F4n'", "'z\\u00FBnlo'", "'boit'", 
                            "'boholon'", "'bog\\u00F4'", "'botuk'", "'bod\\u00EE'", 
                            "'bostof\\u00EEs'", "'box\\u00F4'", "'bob\\u00F4un'", 
                            "'bono'", "'botyoto'", "'bon\\u00F4xo'", "'bol\\u00EEmot'", 
                            "'bong\\u00F4s\\u00EE'", "'bole'", "'boyok'", 
                            "'bomoge'", "'b\\u00F4k\\u00F4foc'", "'bolce'", 
                            "'b\\u00F4kl\\u00F4n'", "'b\\u00F4sol'", "'b\\u00F4nti'", 
                            "'b\\u00F4kb\\u00FBn'", "'bolut\\u00EA'", "'b\\u00F4lf\\u00EAl\\u00EA'", 
                            "'bet\\u00EEdo'", "'bel\\u00EEs\\u00EEs'", "'besol'", 
                            "'bel\\u00EAxu'", "'b\\u00EA\\u00FBdo'", "'b\\u00EA\\u00EEku'", 
                            "'b\\u00EAsu'", "'b\\u00EAl\\u00EAt\\u00EA'", 
                            "'b\\u00EAsn\\u00EAhot'", "'bind\\u00FB'", "'bi'", 
                            "'binl\\u00EA\\u00F4'", "'bit\\u00FBn'", "'b\\u00EEol\\u00EE'", 
                            "'bil\\u00EEt'", "'b\\u00EEkont\\u00EA'", "'b\\u00EE\\u00F4mu'", 
                            "'b\\u00EEc\\u00FBon'", "'b\\u00EEek'", "'b\\u00EEt'", 
                            "'b\\u00EEs\\u00FB'", "'b\\u00EEn\\u00EA'", 
                            "'b\\u00EEb\\u00F4k'", "'b\\u00EEnh\\u00FBn'", 
                            "'b\\u00EEnton'", "'buk\\u00FB'", "'bucono'", 
                            "'busw\\u00EAlin'", "'buswen'", "'bunxin'", 
                            "'buyencok'", "'bundu'", "'b\\u00FBgot'", "'b\\u00FB\\u00EEh\\u00EE'", 
                            "'b\\u00FBsin'", "'b\\u00FBsl\\u00FB'", "'b\\u00FBdogo'", 
                            "'b\\u00FBd\\u00EEk\\u00F4'", "'b\\u00FBz\\u00F4k'", 
                            "'b\\u00FBm\\u00EE'", "'b\\u00FBnt\\u00FBt'", 
                            "'b\\u00FBnd\\u00FBk\\u00EE'", "'fo\\u00FBt'", 
                            "'b\\u00FBlo'", "'fohoso'", "'b\\u00FBl\\u00FBs\\u00EE'", 
                            "'fos'", "'b\\u00EAmon'", "'b\\u00EEl\\u00FBs'", 
                            "'but'", "'fonolon'", "'foxo'", "'fonmot'", 
                            "'fonx\\u00EEn'", "'folo'", "'foko'", "'f\\u00F4hon'", 
                            "'f\\u00F4g\\u00EEc\\u00EEn'", "'f\\u00F4doloc'", 
                            "'f\\u00F4ln\\u00EE'", "'fonf\\u00FBk'", "'f\\u00F4lun'", 
                            "'fecko'", "'fikwun'", "'f\\u00EAlkon\\u00F4'", 
                            "'f\\u00EAlc\\u00EEn'", "'fen\\u00FBo'", "'fildonbun'", 
                            "'f\\u00EEectu'", "'fisun'", "'f\\u00EEt\\u00EEk\\u00F4s'", 
                            "'fiy\\u00FBx\\u00EEt'", "'f\\u00EEm\\u00F4sy\\u00F4s'", 
                            "'f\\u00EEcwo'", "'f\\u00EElo'", "'f\\u00EEz\\u00EE'", 
                            "'fu\\u00EE'", "'f\\u00EEy\\u00EAn'", "'fun'", 
                            "'funs\\u00FBt'", "'fulk\\u00F4\\u00EE'", "'funl\\u00EEt'", 
                            "'f\\u00FBts\\u00FBn'", "'f\\u00FBongok'", "'f\\u00FBk\\u00FBxi'", 
                            "'f\\u00FBus'", "'f\\u00FBx\\u00FBb\\u00EEn'", 
                            "'f\\u00FBnb\\u00EAtsi'", "'f\\u00FBnl\\u00F4k'", 
                            "'f\\u00EEk\\u00EE'", "'mokon'", "'f\\u00FBnb\\u00F4'", 
                            "'mot\\u00FBo'", "'mosk\\u00FBl'", "'mocko'", 
                            "'mozulis'", "'moz\\u00EEk\\u00F4'", "'motsi'", 
                            "'moz\\u00FBn'", "'monodo'", "'momok\\u00EE'", 
                            "'moxo'", "'mont\\u00FBksol'", "'mong\\u00F4'", 
                            "'m\\u00F4\\u00EE'", "'m\\u00F4k\\u00F4fo'", 
                            "'m\\u00F4t\\u00F4'", "'m\\u00F4kwon'", "'m\\u00F4towo'", 
                            "'m\\u00F4t\\u00EEf\\u00F4'", "'m\\u00F4c\\u00EEbo'", 
                            "'m\\u00F4tsil\\u00EA'", "'m\\u00F4f\\u00EE'", 
                            "'m\\u00F4n\\u00EEso'", "'mef\\u00FBs'", "'m\\u00EAtl\\u00EE\\u00F4s'", 
                            "'m\\u00EAd\\u00FBson'", "'m\\u00F4nbili'", 
                            "'m\\u00EAny\\u00FBu'", "'m\\u00EAn\\u00FBs'", 
                            "'mixofo'", "'m\\u00EAloc'", "'misli'", "'minyoto'", 
                            "'miny\\u00F4'", "'m\\u00EEo\\u00FB'", "'m\\u00EEkdol'", 
                            "'m\\u00EE\\u00EAbil'", "'m\\u00EEtet\\u00EAn'", 
                            "'m\\u00EEtmo'", "'m\\u00EEc\\u00EEn'", "'m\\u00EEencok'", 
                            "'m\\u00EEle'", "'m\\u00EEh\\u00FBon'", "'mu\\u00EEl\\u00F4'", 
                            "'m\\u00EEstu'", "'mun\\u00EE'", "'munyufo'", 
                            "'mutyu'", "'m\\u00FBun'", "'m\\u00FB\\u00EAs\\u00EE'", 
                            "'m\\u00FBk\\u00F4nun'", "'m\\u00FBt'", "'m\\u00FBhoyon'", 
                            "'m\\u00FBkno'", "'m\\u00FBstok\\u00EEn'", "'m\\u00FBx\\u00EE'", 
                            "'m\\u00FBf\\u00EA\\u00FB'", "'no\\u00EE'", 
                            "'no\\u00F4'", "'m\\u00FBl\\u00FB'", "'nokdo'", 
                            "'m\\u00FBnc\\u00FB'", "'m\\u00FBncot\\u00EE'", 
                            "'no\\u00FBku'", "'noc\\u00EEdo'", "'noz\\u00EE'", 
                            "'non'", "'nom\\u00FB'", "'nos\\u00F4'", "'nonk\\u00FB'", 
                            "'nodu'", "'noyo'", "'nonto'", "'ne\\u00EEgin'", 
                            "'n\\u00F4'", "'n\\u00F4kso'", "'n\\u00F4\\u00EElu'", 
                            "'nec'", "'nex\\u00EA'", "'nebu'", "'nendol'", 
                            "'n\\u00EAx\\u00F4d\\u00EE'", "'n\\u00EA\\u00F4s'", 
                            "'n\\u00EAl\\u00F4'", "'ni'", "'n\\u00EAnko'", 
                            "'nicu'", "'nikf\\u00FBl'", "'nisw\\u00EE'", 
                            "'niwos'", "'nix\\u00EEn'", "'nilol'", "'n\\u00EEo'", 
                            "'n\\u00EE\\u00F4k'", "'n\\u00EEecni'", "'n\\u00EEm\\u00FB'", 
                            "'nubuso'", "'nucoto'", "'nukul\\u00F4'", "'n\\u00EElt\\u00FBgu'", 
                            "'nungo'", "'num\\u00FBno'", "'nulto'", "'nul\\u00FBhu'", 
                            "'woh\\u00EE'", "'n\\u00FByo'", "'wok\\u00FBt'", 
                            "'n\\u00FBs'", "'nulun'", "'wod\\u00EEno'", 
                            "'wokto'", "'wofok'", "'wonk\\u00FBk'", "'wob\\u00EE'", 
                            "'woy\\u00FB'", "'woloko'", "'wedo'", "'wowo\\u00EA'", 
                            "'w\\u00EA\\u00EElun'", "'welt\\u00F4'", "'w\\u00F4lik'", 
                            "'w\\u00EAko'", "'w\\u00EAtod\\u00FB'", "'w\\u00EAk\\u00EAso'", 
                            "'w\\u00EAx\\u00F4n'", "'wikse'", "'win\\u00EEt'", 
                            "'w\\u00EAt\\u00FB'", "'wixon\\u00FB'", "'w\\u00EEx\\u00EAs'", 
                            "'w\\u00EEbolo'", "'w\\u00EEl\\u00EE'", "'w\\u00EAloi'", 
                            "'wu\\u00EEts\\u00EE'", "'wuktom\\u00FB'", "'wuto'", 
                            "'wutun'", "'w\\u00EEk'", "'w\\u00EEl\\u00FBwo'", 
                            "'wulus'", "'w\\u00FB\\u00F4t'", "'losol'", 
                            "'lohot'", "'loz\\u00EEd\\u00F4'", "'lobot\\u00F4l'", 
                            "'longi'", "'loz\\u00F4'", "'lon'", "'l\\u00F4\\u00EEc\\u00F4k'", 
                            "'lono'", "'l\\u00F4tfen'", "'lol\\u00FB'", 
                            "'londuluk'", "'l\\u00F4z\\u00EEc'", "'l\\u00F4c'", 
                            "'l\\u00F4nkin'", "'leknek'", "'lexetko'", "'leg\\u00EAf\\u00FB'", 
                            "'l\\u00EAf\\u00F4tol'", "'l\\u00EEonx\\u00EEn'", 
                            "'l\\u00EAkin'", "'l\\u00EEun'", "'l\\u00EE\\u00FBb\\u00EEt'", 
                            "'li'", "'l\\u00EE\\u00FBl\\u00EA'", "'l\\u00EEs'", 
                            "'l\\u00EEt\\u00F4'", "'l\\u00EEb\\u00FB'", 
                            "'l\\u00EEtiwe'", "'l\\u00EEsto'", "'luh\\u00FB'", 
                            "'l\\u00EEm\\u00EEen'", "'lufono'", "'l\\u00EEsmu'", 
                            "'l\\u00FB\\u00EEc\\u00FB'", "'lunsol'", "'l\\u00FBok'", 
                            "'l\\u00FBko'", "'l\\u00FBcik'", "'l\\u00FBcku'", 
                            "'yo\\u00FBmok'", "'yo\\u00FBt\\u00EE'", "'yok\\u00FBnt\\u00EEk'", 
                            "'l\\u00FBnt\\u00EE'", "'yosk\\u00EEnyo'", "'yog\\u00F4'", 
                            "'yosten'", "'yob\\u00EA'", "'yodo'", "'yof\\u00FBk'", 
                            "'y\\u00F4\\u00FBl\\u00EE'", "'yold\\u00FBn'", 
                            "'yonl\\u00FBs'", "'y\\u00F4\\u00FBx\\u00EEn'", 
                            "'y\\u00F4k'", "'y\\u00F4cno'", "'y\\u00F4n'", 
                            "'y\\u00EA'", "'y\\u00F4n\\u00EA'", "'yiny\\u00FBnc\\u00EE'", 
                            "'yins\\u00FBk'", "'yumon'", "'yund\\u00F4\\u00FB'", 
                            "'y\\u00FBkwo\\u00EE'", "'y\\u00FBnl\\u00F4n'" ];
    static symbolicNames = [ null, "WS", "Oiyo", "ProperNoun", "Comma", 
                             "Colon", "Period", "QuestionStart", "QuestionEnd", 
                             "QuotationStart", "QuotationEnd", "Outo", "Okulo", 
                             "Oudi", "Okot", "Oksios", "Oklumun", "Oksun", 
                             "Ogolol", "Ogoge", "Ocuo", "Otos", "Okoxu", 
                             "Ostok", "Odigon", "Osyen", "Ozuul", "Oboki", 
                             "Obo", "Obunyun", "Obulu", "Ofek", "Ofine", 
                             "Omulto", "Onkuol", "Ono", "Onkonu", "Oncemon", 
                             "Ondo", "Ongolo", "Ohel", "Oitun", "Onwoni", 
                             "Otsotot", "Onfibi", "Osole", "Oltu", "Osti", 
                             "Oldis", "Ofo", "Ozil", "Odon", "Obok", "Oni", 
                             "Et", "Eson", "Onton", "Onsu", "Eswen", "Ole", 
                             "Eloi", "En", "Eleke", "Eo", "Etso", "Elentet", 
                             "Elfu", "Ebol", "Eme", "Efun", "Itihos", "Enbukun", 
                             "Enkomon", "Eleo", "Isbulyol", "Eto", "Iciwu", 
                             "Icwon", "Istihol", "Iwote", "Isenso", "Infultin", 
                             "Isbonxu", "Isko", "Ixolo", "Imon", "Ibudu", 
                             "Isibo", "Ibuwe", "Ilik", "In", "Ibole", "Uklo", 
                             "Usundul", "Inboli", "Uskifo", "Ubolni", "Ile", 
                             "Ilxizuk", "Umo", "Ubenus", "Ufulit", "Undofol", 
                             "Unbol", "Uyo", "Ulyo", "Unon", "U", "Unbu", 
                             "Usen", "Ucumi", "Usowo", "Utok", "Umomi", 
                             "Usmon", "Uslek", "Unidu", "Un", "Unhilun", 
                             "Uncoi", "Ulkefi", "Ulgukin", "Ulonfu", "Ulogun", 
                             "Unfuno", "Hokiki", "Ulzo", "Hoi", "Hokoli", 
                             "Hokuxi", "Hosoun", "Hoxobe", "Hobiyo", "Homus", 
                             "Hondon", "Hoos", "Hosin", "Hondot", "Hofo", 
                             "Hoktun", "Hofezi", "Hon", "Honcou", "Holuk", 
                             "Holmo", "Hodoku", "Hefin", "Henonde", "Honyo", 
                             "Helgo", "Helxun", "Henelo", "Hitsu", "Hitnodet", 
                             "Hismo", "Hizon", "Hunzidu", "Huluko", "Huunhu", 
                             "Huke", "Hukun", "Husku", "Hustun", "Hudul", 
                             "Hunsik", "Huzon", "Hunsuon", "Hiyoli", "Huwuncul", 
                             "Huwu", "Hiskunco", "Hiklihos", "Hulodek", 
                             "Hulu", "Kocko", "Kon", "Kotilmok", "Kobut", 
                             "Kotonhon", "Konxo", "Ko", "Kontol", "Koi", 
                             "Konbokbo", "Konwo", "Koto", "Kolowu", "Kokoku", 
                             "Kos", "Koson", "Kotfusu", "Koxente", "Kotikol", 
                             "Konen", "Komu", "Kodus", "Kondodu", "Kontesto", 
                             "Kondonse", "Kolmudul", "Kosmo", "Konyec", 
                             "Konbo", "Kelo", "Ke", "Keskin", "Kexik", "Kelos", 
                             "Kiungo", "Kistose", "Kikolo", "Kioso", "Kiluku", 
                             "Kisko", "Kinoxi", "Kino", "Kiso", "Kinse", 
                             "Kuunme", "Kinyosel", "Kinlik", "Kildo", "Kiyo", 
                             "Kut", "Kutin", "Kududo", "Kukwon", "Kuon", 
                             "Kuocyo", "Kuu", "Kuonlon", "Kukmut", "Kusowi", 
                             "Kunonti", "Kuzou", "Kudu", "Kumun", "Kuoxi", 
                             "Kunhiun", "Kuncien", "Kungiyo", "Kunbi", "Kuldu", 
                             "Gosil", "Gos", "Kulunun", "Gomi", "Kuyo", 
                             "Goniso", "Gonbu", "Gonzil", "Gongoxi", "Golo", 
                             "Golfon", "Golbinus", "Golun", "Go", "Gocidon", 
                             "Gonyumon", "Gowo", "Goyu", "Gemolen", "Goluo", 
                             "Gelmis", "Gitno", "Geko", "Gion", "Gik", "Gito", 
                             "Gubuyo", "Gisgul", "Gufis", "Gueyu", "Guexo", 
                             "Gundole", "Gudolo", "Guso", "Gunokol", "Gumi", 
                             "Guwolo", "Gufoxe", "Gufio", "Gulu", "Tou", 
                             "Gulobi", "Totsi", "Touyen", "Tohilok", "Toswil", 
                             "Toliyo", "Towe", "Tonbokcut", "Tolen", "Toliko", 
                             "Tolxeto", "To", "Tocit", "Toncoi", "Tomos", 
                             "Tolki", "Toxutsi", "Tenkin", "Tetek", "Tigoyo", 
                             "Telo", "Tifulci", "Tonko", "Tiu", "Til", "Tiku", 
                             "Tukwos", "Tikel", "Tixo", "Tubo", "Titon", 
                             "Timiok", "Tuluti", "Tuek", "Tulkolyun", "Tut", 
                             "Tundu", "Tuu", "Tulokon", "Tulono", "Cok", 
                             "Comen", "Cokwoli", "Cokyen", "Conoi", "Cosni", 
                             "Conwebo", "Colot", "Coufon", "Conzodo", "Cot", 
                             "Counton", "Cocko", "Comel", "Conkok", "Centik", 
                             "Ceo", "Cenci", "Cenbo", "Cen", "Cixin", "Cihou", 
                             "Cifu", "Cizi", "Cifulo", "Cino", "Cingi", 
                             "Cinobu", "Ciwindi", "Cies", "Ci", "Cienxin", 
                             "Cihun", "Cikinil", "Cibon", "Cigilsu", "Citse", 
                             "Cinzon", "Cinli", "Cuskido", "Cukto", "Cunliu", 
                             "Cuncion", "Cuonwun", "Cunyu", "Cutne", "Culono", 
                             "Cuti", "Cui", "Cubu", "Cuxien", "Cudo", "Cufo", 
                             "Cunfu", "Cungo", "Cundol", "Culosun", "Sokofu", 
                             "Sohou", "Sokol", "Culci", "Sotnin", "Culul", 
                             "Soden", "Sodolun", "Socok", "Sodilu", "Sobole", 
                             "Sobuni", "Sobis", "Sonkon", "Somo", "Sofin", 
                             "Sonti", "Solilo", "Solwoc", "Sotun", "Sonsus", 
                             "Sohouk", "Sobo", "Solu", "Ses", "Sondonos", 
                             "Soltustik", "Senwic", "Seki", "Seloho", "Sedu", 
                             "Semoi", "Sekiton", "Selbo", "Siskin", "Senzo", 
                             "Sel", "Sityo", "Si", "Siokbi", "Sieto", "Sinsi", 
                             "Sikot", "Siufo", "Sinexis", "Sintokmo", "Sikin", 
                             "Suhot", "Sukyunik", "Sufoun", "Sumon", "Sundibot", 
                             "Sunbulno", "Sunyotni", "Suit", "Sutuo", "Suoxic", 
                             "Suson", "Xoinbo", "Subol", "Xohofec", "Sunbidu", 
                             "Suko", "Sun", "Xofo", "Xokulu", "Xobo", "Xontun", 
                             "Xobek", "Xokon", "Xonluk", "Xoboi", "Xomutlo", 
                             "Xe", "Xowose", "Xolu", "Xecinoc", "Xolxili", 
                             "Xemetsen", "Xon", "Xeti", "Xefizec", "Xingo", 
                             "Xifon", "Xentil", "Xiufu", "Xiulo", "Xiko", 
                             "Xidetli", "Xixulko", "Xisu", "Ximol", "Xincuon", 
                             "Ximu", "Xulmindo", "Xiwon", "Xiyocu", "Xuto", 
                             "Xuk", "Xusten", "Doi", "Xunyu", "Xuxok", "Doinbi", 
                             "Doho", "Dohil", "Doicel", "Dokdogo", "Dodou", 
                             "Doknu", "Dondun", "Dokcon", "Donus", "Dode", 
                             "Docui", "Dostoc", "Donuxin", "Deku", "Deko", 
                             "Des", "Den", "Di", "Dibo", "Dizel", "Detoi", 
                             "Denemek", "Dinci", "Didozu", "Dinzou", "Diyonde", 
                             "Duuhon", "Dile", "Dus", "Dukwelit", "Dumoko", 
                             "Duwoni", "Dui", "Duuncit", "Dusul", "Dubono", 
                             "Dustu", "Dungo", "Dundon", "Zoso", "Zomo", 
                             "Zoston", "Zomi", "Zonubi", "Zomuni", "Zonwul", 
                             "Zowo", "Zohit", "Zoi", "Zoloni", "Zohun", 
                             "Zoli", "Zogoc", "Zotesto", "Ze", "Zelen", 
                             "Zensi", "Zesto", "Zik", "Zizime", "Ziyon", 
                             "Zigil", "Zinkon", "Zicou", "Zixitu", "Zingu", 
                             "Ziziyo", "Ziwit", "Zuko", "Zusbot", "Zuwobu", 
                             "Zilyois", "Zungo", "Zuto", "Zuntulu", "Zuhu", 
                             "Zuyi", "Boifon", "Zunlo", "Boit", "Boholon", 
                             "Bogo", "Botuk", "Bodi", "Bostofis", "Boxo", 
                             "Boboun", "Bono", "Botyoto", "Bonoxo", "Bolimot", 
                             "Bongosi", "Bole", "Boyok", "Bomoge", "Bokofoc", 
                             "Bolce", "Boklon", "Bosol", "Bonti", "Bokbun", 
                             "Bolute", "Bolfele", "Betido", "Belisis", "Besol", 
                             "Belexu", "Beudo", "Beiku", "Besu", "Belete", 
                             "Besnehot", "Bindu", "Bi", "Binleo", "Bitun", 
                             "Bioli", "Bilit", "Bikonte", "Biomu", "Bicuon", 
                             "Biek", "Bit", "Bisu", "Bine", "Bibok", "Binhun", 
                             "Binton", "Buku", "Bucono", "Buswelin", "Buswen", 
                             "Bunxin", "Buyencok", "Bundu", "Bugot", "Buihi", 
                             "Busin", "Buslu", "Budogo", "Budiko", "Buzok", 
                             "Bumi", "Buntut", "Bunduki", "Fout", "Bulo", 
                             "Fohoso", "Bulusi", "Fos", "Bemon", "Bilus", 
                             "But", "Fonolon", "Foxo", "Fonmot", "Fonxin", 
                             "Folo", "Foko", "Fohon", "Fogicin", "Fodoloc", 
                             "Folni", "Fonfuk", "Folun", "Fecko", "Fikwun", 
                             "Felkono", "Felcin", "Fenuo", "Fildonbun", 
                             "Fiectu", "Fisun", "Fitikos", "Fiyuxit", "Fimosyos", 
                             "Ficwo", "Filo", "Fizi", "Fui", "Fiyen", "Fun", 
                             "Funsut", "Fulkoi", "Funlit", "Futsun", "Fuongok", 
                             "Fukuxi", "Fuus", "Fuxubin", "Funbetsi", "Funlok", 
                             "Fiki", "Mokon", "Funbo", "Motuo", "Moskul", 
                             "Mocko", "Mozulis", "Moziko", "Motsi", "Mozun", 
                             "Monodo", "Momoki", "Moxo", "Montuksol", "Mongo", 
                             "Moi", "Mokofo", "Moto", "Mokwon", "Motowo", 
                             "Motifo", "Mocibo", "Motsile", "Mofi", "Moniso", 
                             "Mefus", "Metlios", "Meduson", "Monbili", "Menyuu", 
                             "Menus", "Mixofo", "Meloc", "Misli", "Minyoto", 
                             "Minyo", "Miou", "Mikdol", "Miebil", "Miteten", 
                             "Mitmo", "Micin", "Miencok", "Mile", "Mihuon", 
                             "Muilo", "Mistu", "Muni", "Munyufo", "Mutyu", 
                             "Muun", "Muesi", "Mukonun", "Mut", "Muhoyon", 
                             "Mukno", "Mustokin", "Muxi", "Mufeu", "Noi", 
                             "Noo", "Mulu", "Nokdo", "Muncu", "Muncoti", 
                             "Nouku", "Nocido", "Nozi", "Non", "Nomu", "Noso", 
                             "Nonku", "Nodu", "Noyo", "Nonto", "Neigin", 
                             "No", "Nokso", "Noilu", "Nec", "Nexe", "Nebu", 
                             "Nendol", "Nexodi", "Neos", "Nelo", "Ni", "Nenko", 
                             "Nicu", "Nikful", "Niswi", "Niwos", "Nixin", 
                             "Nilol", "Nio", "Niok", "Niecni", "Nimu", "Nubuso", 
                             "Nucoto", "Nukulo", "Niltugu", "Nungo", "Numuno", 
                             "Nulto", "Nuluhu", "Wohi", "Nuyo", "Wokut", 
                             "Nus", "Nulun", "Wodino", "Wokto", "Wofok", 
                             "Wonkuk", "Wobi", "Woyu", "Woloko", "Wedo", 
                             "Wowoe", "Weilun", "Welto", "Wolik", "Weko", 
                             "Wetodu", "Wekeso", "Wexon", "Wikse", "Winit", 
                             "Wetu", "Wixonu", "Wixes", "Wibolo", "Wili", 
                             "Weloi", "Wuitsi", "Wuktomu", "Wuto", "Wutun", 
                             "Wik", "Wiluwo", "Wulus", "Wuot", "Losol", 
                             "Lohot", "Lozido", "Lobotol", "Longi", "Lozo", 
                             "Lon", "Loicok", "Lono", "Lotfen", "Lolu", 
                             "Londuluk", "Lozic", "Loc", "Lonkin", "Leknek", 
                             "Lexetko", "Legefu", "Lefotol", "Lionxin", 
                             "Lekin", "Liun", "Liubit", "Li", "Liule", "Lis", 
                             "Lito", "Libu", "Litiwe", "Listo", "Luhu", 
                             "Limien", "Lufono", "Lismu", "Luicu", "Lunsol", 
                             "Luok", "Luko", "Lucik", "Lucku", "Youmok", 
                             "Youti", "Yokuntik", "Lunti", "Yoskinyo", "Yogo", 
                             "Yosten", "Yobe", "Yodo", "Yofuk", "Youli", 
                             "Yoldun", "Yonlus", "Youxin", "Yok", "Yocno", 
                             "Yon", "Ye", "Yone", "Yinyunci", "Yinsuk", 
                             "Yumon", "Yundou", "Yukwoi", "Yunlon" ];
    static ruleNames = [ "sentences", "sentencePunctuation", "sentence", 
                         "restrictedSentence", "freeAgentConstituent", "constituent", 
                         "adjectivalClause", "adjectivalNucleus", "subordinateClause", 
                         "transitiveVerb", "quantity", "prepParticle", "nounPhrase", 
                         "verbalNounPhrase", "prepPhrase", "nominalNucleus", 
                         "verbalParticles", "verbalNoun", "verbMarker", 
                         "verbModifier", "interjection", "contentParticles", 
                         "baseNoun", "baseModifier", "relativeQuantity", 
                         "nominalQuantity", "postposition", "pronoun", "rawVerbs", 
                         "rawNouns", "rawModifiers", "connector" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = HisyeoParser.ruleNames;
        this.literalNames = HisyeoParser.literalNames;
        this.symbolicNames = HisyeoParser.symbolicNames;
    }



	sentences() {
	    let localctx = new SentencesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, HisyeoParser.RULE_sentences);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 65;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 64;
	            this.match(HisyeoParser.QuestionStart);
	        }

	        this.state = 67;
	        this.sentence();
	        this.state = 79;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 77;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 5:
	                case 6:
	                case 8:
	                    this.state = 68;
	                    this.sentencePunctuation();
	                    this.state = 70;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===7) {
	                        this.state = 69;
	                        this.match(HisyeoParser.QuestionStart);
	                    }

	                    this.state = 72;
	                    this.sentence();
	                    break;
	                case 61:
	                case 117:
	                case 609:
	                case 840:
	                case 868:
	                    this.state = 74;
	                    this.connector();
	                    this.state = 75;
	                    this.restrictedSentence();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 81;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	        }

	        this.state = 83;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 352) !== 0)) {
	            this.state = 82;
	            this.sentencePunctuation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sentencePunctuation() {
	    let localctx = new SentencePunctuationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, HisyeoParser.RULE_sentencePunctuation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 85;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 352) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sentence() {
	    let localctx = new SentenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, HisyeoParser.RULE_sentence);
	    var _la = 0;
	    try {
	        this.state = 105;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 87;
	            this.freeAgentConstituent();
	            this.state = 91;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 88;
	                    this.constituent(); 
	                }
	                this.state = 93;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	            }

	            this.state = 95;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	            if(la_===1) {
	                this.state = 94;
	                this.postposition();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 98;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===61 || _la===117 || _la===609 || _la===840 || _la===868) {
	                this.state = 97;
	                this.connector();
	            }

	            this.state = 100;
	            this.restrictedSentence();
	            this.state = 102;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	            if(la_===1) {
	                this.state = 101;
	                this.postposition();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 104;
	            this.interjection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restrictedSentence() {
	    let localctx = new RestrictedSentenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, HisyeoParser.RULE_restrictedSentence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 108; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 107;
	        		this.constituent();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 110; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,10, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 113;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        if(la_===1) {
	            this.state = 112;
	            this.postposition();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freeAgentConstituent() {
	    let localctx = new FreeAgentConstituentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, HisyeoParser.RULE_freeAgentConstituent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 115;
	        this.nounPhrase();
	        this.state = 121;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 116;
	                this.connector();
	                this.state = 117;
	                this.prepPhrase(); 
	            }
	            this.state = 123;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constituent() {
	    let localctx = new ConstituentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, HisyeoParser.RULE_constituent);
	    var _la = 0;
	    try {
	        this.state = 140;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 31:
	        case 48:
	        case 59:
	        case 89:
	        case 107:
	        case 127:
	        case 141:
	        case 264:
	        case 295:
	        case 308:
	        case 345:
	        case 444:
	        case 501:
	        case 598:
	        case 710:
	        case 730:
	        case 736:
	        case 764:
	        case 826:
	            localctx = new PrepositionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 124;
	            this.prepParticle();
	            this.state = 125;
	            this.prepPhrase();
	            break;
	        case 11:
	        case 12:
	        case 14:
	        case 18:
	        case 30:
	        case 34:
	        case 36:
	        case 37:
	        case 38:
	        case 41:
	        case 56:
	        case 77:
	        case 83:
	        case 85:
	        case 95:
	        case 106:
	        case 115:
	        case 118:
	        case 132:
	        case 138:
	        case 145:
	        case 146:
	        case 149:
	        case 159:
	        case 160:
	        case 161:
	        case 181:
	        case 182:
	        case 185:
	        case 188:
	        case 189:
	        case 196:
	        case 197:
	        case 203:
	        case 204:
	        case 216:
	        case 225:
	        case 229:
	        case 246:
	        case 248:
	        case 252:
	        case 255:
	        case 257:
	        case 279:
	        case 281:
	        case 286:
	        case 288:
	        case 301:
	        case 316:
	        case 317:
	        case 321:
	        case 322:
	        case 330:
	        case 332:
	        case 344:
	        case 346:
	        case 356:
	        case 360:
	        case 362:
	        case 364:
	        case 365:
	        case 366:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 378:
	        case 380:
	        case 389:
	        case 391:
	        case 393:
	        case 395:
	        case 404:
	        case 410:
	        case 418:
	        case 424:
	        case 437:
	        case 443:
	        case 446:
	        case 447:
	        case 448:
	        case 462:
	        case 466:
	        case 476:
	        case 480:
	        case 485:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 496:
	        case 499:
	        case 502:
	        case 506:
	        case 510:
	        case 511:
	        case 520:
	        case 521:
	        case 522:
	        case 532:
	        case 548:
	        case 555:
	        case 558:
	        case 561:
	        case 562:
	        case 580:
	        case 582:
	        case 583:
	        case 588:
	        case 590:
	        case 591:
	        case 592:
	        case 596:
	        case 606:
	        case 607:
	        case 614:
	        case 616:
	        case 632:
	        case 635:
	        case 649:
	        case 657:
	        case 659:
	        case 663:
	        case 664:
	        case 668:
	        case 670:
	        case 678:
	        case 679:
	        case 685:
	        case 687:
	        case 699:
	        case 701:
	        case 725:
	        case 741:
	        case 743:
	        case 768:
	        case 778:
	        case 790:
	        case 795:
	        case 797:
	        case 800:
	        case 801:
	        case 802:
	        case 806:
	        case 811:
	        case 812:
	        case 823:
	        case 832:
	        case 841:
	        case 842:
	        case 843:
	        case 852:
	        case 855:
	        case 866:
	        case 876:
	        case 882:
	        case 884:
	            localctx = new VerbalPrepositionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===182 || _la===204 || _la===229 || _la===607) {
	                this.state = 127;
	                this.verbMarker();
	            }

	            this.state = 130;
	            this.transitiveVerb();
	            this.state = 134;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===63 || _la===419 || _la===874) {
	                this.state = 131;
	                this.verbModifier();
	                this.state = 136;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 138;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            if(la_===1) {
	                this.state = 137;
	                this.prepPhrase();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adjectivalClause() {
	    let localctx = new AdjectivalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, HisyeoParser.RULE_adjectivalClause);
	    var _la = 0;
	    try {
	        this.state = 179;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 143;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===54) {
	                this.state = 142;
	                this.match(HisyeoParser.Et);
	            }

	            this.state = 145;
	            this.match(HisyeoParser.Ye);
	            this.state = 154;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 12:
	            case 13:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 18:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 23:
	            case 24:
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 60:
	            case 62:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 181:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 386:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 433:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 453:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 522:
	            case 523:
	            case 524:
	            case 525:
	            case 526:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 545:
	            case 546:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 559:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 590:
	            case 591:
	            case 592:
	            case 593:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 599:
	            case 600:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 635:
	            case 636:
	            case 637:
	            case 638:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 676:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 683:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 698:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 711:
	            case 712:
	            case 713:
	            case 714:
	            case 715:
	            case 716:
	            case 717:
	            case 718:
	            case 719:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 735:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 804:
	            case 805:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 828:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 841:
	            case 842:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 875:
	            case 876:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	                this.state = 146;
	                this.adjectivalNucleus();
	                this.state = 150;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 147;
	                        this.adjectivalClause(); 
	                    }
	                    this.state = 152;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
	                }

	                break;
	            case 454:
	            case 634:
	                this.state = 153;
	                this.subordinateClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 156;
	            this.match(HisyeoParser.Et);
	            this.state = 165;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 13:
	            case 15:
	            case 16:
	            case 17:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 23:
	            case 24:
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 32:
	            case 33:
	            case 35:
	            case 39:
	            case 40:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 55:
	            case 57:
	            case 58:
	            case 60:
	            case 62:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 84:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 116:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 139:
	            case 140:
	            case 142:
	            case 143:
	            case 144:
	            case 147:
	            case 148:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 183:
	            case 184:
	            case 186:
	            case 187:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 226:
	            case 227:
	            case 228:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 245:
	            case 247:
	            case 249:
	            case 250:
	            case 251:
	            case 253:
	            case 254:
	            case 256:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 280:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 287:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 318:
	            case 319:
	            case 320:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 331:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 345:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 355:
	            case 357:
	            case 358:
	            case 359:
	            case 361:
	            case 363:
	            case 367:
	            case 368:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 377:
	            case 379:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 386:
	            case 387:
	            case 388:
	            case 390:
	            case 392:
	            case 394:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 409:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 433:
	            case 434:
	            case 435:
	            case 436:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 445:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 453:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 463:
	            case 464:
	            case 465:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 477:
	            case 478:
	            case 479:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 486:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 497:
	            case 498:
	            case 500:
	            case 503:
	            case 504:
	            case 505:
	            case 507:
	            case 508:
	            case 509:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 523:
	            case 524:
	            case 525:
	            case 526:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 545:
	            case 546:
	            case 547:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 556:
	            case 557:
	            case 559:
	            case 560:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 581:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 589:
	            case 593:
	            case 594:
	            case 595:
	            case 597:
	            case 599:
	            case 600:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 608:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 615:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 633:
	            case 636:
	            case 637:
	            case 638:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 658:
	            case 660:
	            case 661:
	            case 662:
	            case 665:
	            case 666:
	            case 667:
	            case 669:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 676:
	            case 677:
	            case 680:
	            case 681:
	            case 682:
	            case 683:
	            case 684:
	            case 686:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 698:
	            case 700:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 711:
	            case 712:
	            case 713:
	            case 714:
	            case 715:
	            case 716:
	            case 717:
	            case 718:
	            case 719:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 735:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 742:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 765:
	            case 766:
	            case 767:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 796:
	            case 798:
	            case 799:
	            case 803:
	            case 804:
	            case 805:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 824:
	            case 825:
	            case 828:
	            case 830:
	            case 831:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 853:
	            case 854:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 867:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 875:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 883:
	                this.state = 157;
	                this.nominalNucleus();
	                this.state = 161;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 158;
	                        this.adjectivalClause(); 
	                    }
	                    this.state = 163;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
	                }

	                break;
	            case 454:
	            case 634:
	                this.state = 164;
	                this.subordinateClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 167;
	            this.nominalNucleus();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 168;
	            this.subordinateClause();
	            this.state = 173;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1+1) {
	                this.state = 170;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===180 || _la===354 || _la===539 || _la===639 || _la===827 || _la===829) {
	                    this.state = 169;
	                    this.postposition();
	                }

	                this.state = 172;
	                this.match(HisyeoParser.Comma);

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 176;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===54) {
	                this.state = 175;
	                this.match(HisyeoParser.Et);
	            }

	            this.state = 178;
	            this.match(HisyeoParser.ProperNoun);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adjectivalNucleus() {
	    let localctx = new AdjectivalNucleusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, HisyeoParser.RULE_adjectivalNucleus);
	    try {
	        this.state = 183;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	        case 15:
	        case 16:
	        case 17:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 32:
	        case 33:
	        case 35:
	        case 39:
	        case 40:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 55:
	        case 57:
	        case 58:
	        case 60:
	        case 62:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 84:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 139:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 147:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 183:
	        case 184:
	        case 186:
	        case 187:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 226:
	        case 227:
	        case 228:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 253:
	        case 254:
	        case 256:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 287:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 318:
	        case 319:
	        case 320:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 331:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 345:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 355:
	        case 357:
	        case 358:
	        case 359:
	        case 361:
	        case 363:
	        case 367:
	        case 368:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 377:
	        case 379:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 388:
	        case 390:
	        case 392:
	        case 394:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 433:
	        case 434:
	        case 435:
	        case 436:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 445:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 497:
	        case 498:
	        case 500:
	        case 503:
	        case 504:
	        case 505:
	        case 507:
	        case 508:
	        case 509:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 545:
	        case 546:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 556:
	        case 557:
	        case 559:
	        case 560:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 581:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 589:
	        case 593:
	        case 594:
	        case 595:
	        case 597:
	        case 599:
	        case 600:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 608:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 615:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 633:
	        case 636:
	        case 637:
	        case 638:
	        case 640:
	        case 641:
	        case 642:
	        case 643:
	        case 644:
	        case 645:
	        case 646:
	        case 647:
	        case 648:
	        case 650:
	        case 651:
	        case 652:
	        case 653:
	        case 654:
	        case 655:
	        case 656:
	        case 658:
	        case 660:
	        case 661:
	        case 662:
	        case 665:
	        case 666:
	        case 667:
	        case 669:
	        case 671:
	        case 672:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 677:
	        case 680:
	        case 681:
	        case 682:
	        case 683:
	        case 684:
	        case 686:
	        case 688:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 698:
	        case 700:
	        case 702:
	        case 703:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 711:
	        case 712:
	        case 713:
	        case 714:
	        case 715:
	        case 716:
	        case 717:
	        case 718:
	        case 719:
	        case 720:
	        case 721:
	        case 722:
	        case 723:
	        case 724:
	        case 726:
	        case 727:
	        case 728:
	        case 729:
	        case 731:
	        case 732:
	        case 733:
	        case 734:
	        case 735:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 742:
	        case 744:
	        case 745:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 765:
	        case 766:
	        case 767:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 779:
	        case 780:
	        case 781:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	        case 788:
	        case 789:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 796:
	        case 798:
	        case 799:
	        case 803:
	        case 804:
	        case 805:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 824:
	        case 825:
	        case 828:
	        case 830:
	        case 831:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 853:
	        case 854:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 867:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 875:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 883:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 181;
	            this.nominalNucleus();
	            break;
	        case 11:
	        case 12:
	        case 14:
	        case 18:
	        case 30:
	        case 34:
	        case 36:
	        case 37:
	        case 38:
	        case 41:
	        case 56:
	        case 77:
	        case 83:
	        case 85:
	        case 95:
	        case 106:
	        case 115:
	        case 118:
	        case 132:
	        case 138:
	        case 145:
	        case 146:
	        case 149:
	        case 159:
	        case 160:
	        case 161:
	        case 181:
	        case 185:
	        case 188:
	        case 189:
	        case 196:
	        case 197:
	        case 203:
	        case 216:
	        case 225:
	        case 246:
	        case 248:
	        case 252:
	        case 255:
	        case 257:
	        case 279:
	        case 281:
	        case 286:
	        case 288:
	        case 301:
	        case 316:
	        case 317:
	        case 321:
	        case 322:
	        case 330:
	        case 332:
	        case 344:
	        case 346:
	        case 356:
	        case 360:
	        case 362:
	        case 364:
	        case 365:
	        case 366:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 378:
	        case 380:
	        case 389:
	        case 391:
	        case 393:
	        case 395:
	        case 404:
	        case 410:
	        case 418:
	        case 424:
	        case 437:
	        case 443:
	        case 446:
	        case 447:
	        case 448:
	        case 462:
	        case 466:
	        case 476:
	        case 480:
	        case 485:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 496:
	        case 499:
	        case 502:
	        case 506:
	        case 510:
	        case 511:
	        case 520:
	        case 521:
	        case 522:
	        case 532:
	        case 548:
	        case 555:
	        case 558:
	        case 561:
	        case 562:
	        case 580:
	        case 582:
	        case 583:
	        case 588:
	        case 590:
	        case 591:
	        case 592:
	        case 596:
	        case 606:
	        case 614:
	        case 616:
	        case 632:
	        case 635:
	        case 649:
	        case 657:
	        case 659:
	        case 663:
	        case 664:
	        case 668:
	        case 670:
	        case 678:
	        case 679:
	        case 685:
	        case 687:
	        case 699:
	        case 701:
	        case 725:
	        case 741:
	        case 743:
	        case 768:
	        case 778:
	        case 790:
	        case 795:
	        case 797:
	        case 800:
	        case 801:
	        case 802:
	        case 806:
	        case 811:
	        case 812:
	        case 823:
	        case 832:
	        case 841:
	        case 842:
	        case 852:
	        case 855:
	        case 866:
	        case 876:
	        case 882:
	        case 884:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 182;
	            this.rawVerbs();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subordinateClause() {
	    let localctx = new SubordinateClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, HisyeoParser.RULE_subordinateClause);
	    try {
	        this.state = 192;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 634:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 185;
	            this.match(HisyeoParser.Fos);
	            this.state = 186;
	            this.sentence();
	            this.state = 188;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            if(la_===1) {
	                this.state = 187;
	                this.prepParticle();

	            }
	            break;
	        case 454:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 190;
	            this.match(HisyeoParser.Xe);
	            this.state = 191;
	            this.restrictedSentence();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transitiveVerb() {
	    let localctx = new TransitiveVerbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, HisyeoParser.RULE_transitiveVerb);
	    try {
	        this.state = 196;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	        case 12:
	        case 14:
	        case 18:
	        case 30:
	        case 34:
	        case 36:
	        case 37:
	        case 38:
	        case 41:
	        case 56:
	        case 77:
	        case 83:
	        case 85:
	        case 95:
	        case 106:
	        case 115:
	        case 118:
	        case 132:
	        case 138:
	        case 145:
	        case 146:
	        case 149:
	        case 159:
	        case 160:
	        case 161:
	        case 181:
	        case 185:
	        case 188:
	        case 189:
	        case 196:
	        case 197:
	        case 203:
	        case 216:
	        case 225:
	        case 246:
	        case 248:
	        case 252:
	        case 255:
	        case 257:
	        case 279:
	        case 281:
	        case 286:
	        case 288:
	        case 301:
	        case 316:
	        case 317:
	        case 321:
	        case 322:
	        case 330:
	        case 332:
	        case 344:
	        case 346:
	        case 356:
	        case 360:
	        case 362:
	        case 364:
	        case 365:
	        case 366:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 378:
	        case 380:
	        case 389:
	        case 391:
	        case 393:
	        case 395:
	        case 404:
	        case 410:
	        case 418:
	        case 424:
	        case 437:
	        case 443:
	        case 446:
	        case 447:
	        case 448:
	        case 462:
	        case 466:
	        case 476:
	        case 480:
	        case 485:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 496:
	        case 499:
	        case 502:
	        case 506:
	        case 510:
	        case 511:
	        case 520:
	        case 521:
	        case 522:
	        case 532:
	        case 548:
	        case 555:
	        case 558:
	        case 561:
	        case 562:
	        case 580:
	        case 582:
	        case 583:
	        case 588:
	        case 590:
	        case 591:
	        case 592:
	        case 596:
	        case 606:
	        case 614:
	        case 616:
	        case 632:
	        case 635:
	        case 649:
	        case 657:
	        case 659:
	        case 663:
	        case 664:
	        case 668:
	        case 670:
	        case 678:
	        case 679:
	        case 685:
	        case 687:
	        case 699:
	        case 701:
	        case 725:
	        case 741:
	        case 743:
	        case 768:
	        case 778:
	        case 790:
	        case 795:
	        case 797:
	        case 800:
	        case 801:
	        case 802:
	        case 806:
	        case 811:
	        case 812:
	        case 823:
	        case 832:
	        case 841:
	        case 842:
	        case 852:
	        case 855:
	        case 866:
	        case 876:
	        case 882:
	        case 884:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 194;
	            this.rawVerbs();
	            break;
	        case 843:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 195;
	            this.match(HisyeoParser.Li);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantity() {
	    let localctx = new QuantityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, HisyeoParser.RULE_quantity);
	    var _la = 0;
	    try {
	        this.state = 207;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 199;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 2147614721) !== 0) || _la===345 || _la===450 || _la===538 || _la===626 || _la===653 || _la===692 || _la===707 || _la===861) {
	                this.state = 198;
	                this.relativeQuantity();
	            }

	            this.state = 202; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 201;
	            		this.nominalQuantity();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 204; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 206;
	            this.relativeQuantity();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prepParticle() {
	    let localctx = new PrepParticleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, HisyeoParser.RULE_prepParticle);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 209;
	        _la = this._input.LA(1);
	        if(!(((((_la - 31)) & ~0x1f) === 0 && ((1 << (_la - 31)) & 268566529) !== 0) || _la===89 || _la===107 || _la===127 || _la===141 || _la===264 || _la===295 || _la===308 || _la===345 || _la===444 || _la===501 || _la===598 || ((((_la - 710)) & ~0x1f) === 0 && ((1 << (_la - 710)) & 68157441) !== 0) || _la===764 || _la===826)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nounPhrase() {
	    let localctx = new NounPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, HisyeoParser.RULE_nounPhrase);
	    var _la = 0;
	    try {
	        this.state = 238;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 1050637) !== 0) || _la===89 || _la===217 || _la===223 || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 153092097) !== 0) || _la===345 || _la===405 || _la===450 || _la===461 || _la===482 || _la===513 || ((((_la - 517)) & ~0x1f) === 0 && ((1 << (_la - 517)) & 270532609) !== 0) || _la===564 || _la===577 || _la===626 || _la===653 || ((((_la - 665)) & ~0x1f) === 0 && ((1 << (_la - 665)) & 134217731) !== 0) || _la===707 || _la===748 || _la===767 || _la===861) {
	                this.state = 211;
	                this.quantity();
	            }

	            this.state = 214;
	            this.subordinateClause();
	            this.state = 222;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	            if(la_===1) {
	                this.state = 215;
	                this.match(HisyeoParser.Comma);
	                this.state = 219;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 216;
	                        this.adjectivalClause(); 
	                    }
	                    this.state = 221;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	                }


	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 225;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	            if(la_===1) {
	                this.state = 224;
	                this.quantity();

	            }
	            this.state = 227;
	            this.nominalNucleus();
	            this.state = 231;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 228;
	                    this.adjectivalClause(); 
	                }
	                this.state = 233;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 234;
	            this.match(HisyeoParser.QuotationStart);
	            this.state = 235;
	            this.sentences();
	            this.state = 236;
	            this.match(HisyeoParser.QuotationEnd);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbalNounPhrase() {
	    let localctx = new VerbalNounPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, HisyeoParser.RULE_verbalNounPhrase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 241;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 1050637) !== 0) || _la===89 || _la===217 || _la===223 || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 153092097) !== 0) || _la===345 || _la===405 || _la===450 || _la===461 || _la===482 || _la===513 || ((((_la - 517)) & ~0x1f) === 0 && ((1 << (_la - 517)) & 270532609) !== 0) || _la===564 || _la===577 || _la===626 || _la===653 || ((((_la - 665)) & ~0x1f) === 0 && ((1 << (_la - 665)) & 134217731) !== 0) || _la===707 || _la===748 || _la===767 || _la===861) {
	            this.state = 240;
	            this.quantity();
	        }

	        this.state = 243;
	        this.rawVerbs();
	        this.state = 247;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 244;
	                this.adjectivalClause(); 
	            }
	            this.state = 249;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prepPhrase() {
	    let localctx = new PrepPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, HisyeoParser.RULE_prepPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 252;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 250;
	            this.nounPhrase();
	            break;

	        case 2:
	            this.state = 251;
	            this.verbalNounPhrase();
	            break;

	        }
	        this.state = 261;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 254;
	                this.connector();
	                this.state = 257;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 255;
	                    this.nounPhrase();
	                    break;

	                case 2:
	                    this.state = 256;
	                    this.verbalNounPhrase();
	                    break;

	                } 
	            }
	            this.state = 263;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nominalNucleus() {
	    let localctx = new NominalNucleusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, HisyeoParser.RULE_nominalNucleus);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 270;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 264;
	            this.pronoun();
	            break;

	        case 2:
	            this.state = 265;
	            this.relativeQuantity();
	            break;

	        case 3:
	            this.state = 266;
	            this.nominalQuantity();
	            break;

	        case 4:
	            this.state = 267;
	            this.baseNoun();
	            break;

	        case 5:
	            this.state = 268;
	            this.verbalNoun();
	            break;

	        case 6:
	            this.state = 269;
	            this.baseModifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbalParticles() {
	    let localctx = new VerbalParticlesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, HisyeoParser.RULE_verbalParticles);
	    var _la = 0;
	    try {
	        this.state = 280;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 90:
	        case 500:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 272;
	            _la = this._input.LA(1);
	            if(!(_la===90 || _la===500)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===175 || _la===643) {
	                this.state = 273;
	                _la = this._input.LA(1);
	                if(!(_la===53 || _la===175 || _la===643)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        case 53:
	        case 175:
	        case 643:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 276;
	            _la = this._input.LA(1);
	            if(!(_la===53 || _la===175 || _la===643)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90 || _la===500) {
	                this.state = 277;
	                _la = this._input.LA(1);
	                if(!(_la===90 || _la===500)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbalNoun() {
	    let localctx = new VerbalNounContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, HisyeoParser.RULE_verbalNoun);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 282;
	        this.verbalParticles();
	        this.state = 283;
	        this.rawVerbs();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbMarker() {
	    let localctx = new VerbMarkerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, HisyeoParser.RULE_verbMarker);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 285;
	        _la = this._input.LA(1);
	        if(!(_la===182 || _la===204 || _la===229 || _la===607)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbModifier() {
	    let localctx = new VerbModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, HisyeoParser.RULE_verbModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 287;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===419 || _la===874)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interjection() {
	    let localctx = new InterjectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, HisyeoParser.RULE_interjection);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 289;
	        _la = this._input.LA(1);
	        if(!(_la===2 || _la===601 || _la===874)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contentParticles() {
	    let localctx = new ContentParticlesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, HisyeoParser.RULE_contentParticles);
	    var _la = 0;
	    try {
	        this.state = 299;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 90:
	        case 500:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 291;
	            _la = this._input.LA(1);
	            if(!(_la===90 || _la===500)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 293;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===175 || _la===643) {
	                this.state = 292;
	                _la = this._input.LA(1);
	                if(!(_la===53 || _la===175 || _la===643)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        case 53:
	        case 175:
	        case 643:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 295;
	            _la = this._input.LA(1);
	            if(!(_la===53 || _la===175 || _la===643)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90 || _la===500) {
	                this.state = 296;
	                _la = this._input.LA(1);
	                if(!(_la===90 || _la===500)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseNoun() {
	    let localctx = new BaseNounContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, HisyeoParser.RULE_baseNoun);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 302;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===53 || _la===90 || _la===175 || _la===500 || _la===643) {
	            this.state = 301;
	            this.contentParticles();
	        }

	        this.state = 304;
	        this.rawNouns();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseModifier() {
	    let localctx = new BaseModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, HisyeoParser.RULE_baseModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 307;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===53 || _la===90 || _la===175 || _la===500 || _la===643) {
	            this.state = 306;
	            this.contentParticles();
	        }

	        this.state = 309;
	        this.rawModifiers();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeQuantity() {
	    let localctx = new RelativeQuantityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, HisyeoParser.RULE_relativeQuantity);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 311;
	        _la = this._input.LA(1);
	        if(!(_la===24 || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 2147614721) !== 0) || _la===345 || _la===450 || _la===538 || _la===626 || _la===653 || _la===692 || _la===707 || _la===861)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nominalQuantity() {
	    let localctx = new NominalQuantityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, HisyeoParser.RULE_nominalQuantity);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 313;
	        _la = this._input.LA(1);
	        if(!(((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 2053) !== 0) || _la===217 || _la===223 || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 153092097) !== 0) || _la===405 || _la===461 || _la===482 || _la===513 || _la===517 || _la===545 || _la===564 || _la===577 || _la===665 || _la===666 || _la===748 || _la===767)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postposition() {
	    let localctx = new PostpositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, HisyeoParser.RULE_postposition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 315;
	        _la = this._input.LA(1);
	        if(!(_la===180 || _la===354 || _la===539 || _la===639 || _la===827 || _la===829)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pronoun() {
	    let localctx = new PronounContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, HisyeoParser.RULE_pronoun);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 317;
	        _la = this._input.LA(1);
	        if(!(((((_la - 26)) & ~0x1f) === 0 && ((1 << (_la - 26)) & 8389121) !== 0) || _la===105 || _la===347 || _la===504 || _la===543 || ((((_la - 750)) & ~0x1f) === 0 && ((1 << (_la - 750)) & 18882561) !== 0) || _la===786)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rawVerbs() {
	    let localctx = new RawVerbsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, HisyeoParser.RULE_rawVerbs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        _la = this._input.LA(1);
	        if(!(((((_la - 11)) & ~0x1f) === 0 && ((1 << (_la - 11)) & 1317535883) !== 0) || ((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 673185793) !== 0) || ((((_la - 95)) & ~0x1f) === 0 && ((1 << (_la - 95)) & 9439233) !== 0) || ((((_la - 132)) & ~0x1f) === 0 && ((1 << (_la - 132)) & 939679809) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 4293009) !== 0) || ((((_la - 216)) & ~0x1f) === 0 && ((1 << (_la - 216)) & 1073742337) !== 0) || ((((_la - 248)) & ~0x1f) === 0 && ((1 << (_la - 248)) & 2147484305) !== 0) || ((((_la - 281)) & ~0x1f) === 0 && ((1 << (_la - 281)) & 1048737) !== 0) || ((((_la - 316)) & ~0x1f) === 0 && ((1 << (_la - 316)) & 1342259299) !== 0) || ((((_la - 356)) & ~0x1f) === 0 && ((1 << (_la - 356)) & 22570833) !== 0) || ((((_la - 389)) & ~0x1f) === 0 && ((1 << (_la - 389)) & 539000917) !== 0) || ((((_la - 424)) & ~0x1f) === 0 && ((1 << (_la - 424)) & 29892609) !== 0) || ((((_la - 462)) & ~0x1f) === 0 && ((1 << (_la - 462)) & 511983633) !== 0) || ((((_la - 496)) & ~0x1f) === 0 && ((1 << (_la - 496)) & 117490761) !== 0) || ((((_la - 532)) & ~0x1f) === 0 && ((1 << (_la - 532)) & 1686175745) !== 0) || ((((_la - 580)) & ~0x1f) === 0 && ((1 << (_la - 580)) & 67181837) !== 0) || ((((_la - 614)) & ~0x1f) === 0 && ((1 << (_la - 614)) & 2359301) !== 0) || ((((_la - 649)) & ~0x1f) === 0 && ((1 << (_la - 649)) & 1613284609) !== 0) || ((((_la - 685)) & ~0x1f) === 0 && ((1 << (_la - 685)) & 81925) !== 0) || ((((_la - 725)) & ~0x1f) === 0 && ((1 << (_la - 725)) & 327681) !== 0) || ((((_la - 768)) & ~0x1f) === 0 && ((1 << (_la - 768)) & 675283969) !== 0) || ((((_la - 800)) & ~0x1f) === 0 && ((1 << (_la - 800)) & 8394823) !== 0) || ((((_la - 832)) & ~0x1f) === 0 && ((1 << (_la - 832)) & 9438721) !== 0) || ((((_la - 866)) & ~0x1f) === 0 && ((1 << (_la - 866)) & 328705) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rawNouns() {
	    let localctx = new RawNounsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, HisyeoParser.RULE_rawNouns);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 321;
	        _la = this._input.LA(1);
	        if(!(((((_la - 13)) & ~0x1f) === 0 && ((1 << (_la - 13)) & 3959473817) !== 0) || ((((_la - 47)) & ~0x1f) === 0 && ((1 << (_la - 47)) & 2744295433) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 1900693909) !== 0) || ((((_la - 114)) & ~0x1f) === 0 && ((1 << (_la - 114)) & 1980978945) !== 0) || ((((_la - 148)) & ~0x1f) === 0 && ((1 << (_la - 148)) & 58081625) !== 0) || ((((_la - 186)) & ~0x1f) === 0 && ((1 << (_la - 186)) & 685793555) !== 0) || ((((_la - 218)) & ~0x1f) === 0 && ((1 << (_la - 218)) & 2382292739) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 2850963969) !== 0) || ((((_la - 287)) & ~0x1f) === 0 && ((1 << (_la - 287)) & 503359741) !== 0) || ((((_la - 320)) & ~0x1f) === 0 && ((1 << (_la - 320)) & 1620115817) !== 0) || ((((_la - 352)) & ~0x1f) === 0 && ((1 << (_la - 352)) & 672172257) !== 0) || ((((_la - 384)) & ~0x1f) === 0 && ((1 << (_la - 384)) & 3138240527) !== 0) || ((((_la - 417)) & ~0x1f) === 0 && ((1 << (_la - 417)) & 321437297) !== 0) || ((((_la - 453)) & ~0x1f) === 0 && ((1 << (_la - 453)) & 3594144841) !== 0) || ((((_la - 493)) & ~0x1f) === 0 && ((1 << (_la - 493)) & 2193708085) !== 0) || ((((_la - 525)) & ~0x1f) === 0 && ((1 << (_la - 525)) & 894049895) !== 0) || ((((_la - 557)) & ~0x1f) === 0 && ((1 << (_la - 557)) & 1493201741) !== 0) || ((((_la - 593)) & ~0x1f) === 0 && ((1 << (_la - 593)) & 2185758933) !== 0) || ((((_la - 627)) & ~0x1f) === 0 && ((1 << (_la - 627)) & 160090191) !== 0) || ((((_la - 662)) & ~0x1f) === 0 && ((1 << (_la - 662)) & 2704563729) !== 0) || ((((_la - 694)) & ~0x1f) === 0 && ((1 << (_la - 694)) & 1136037901) !== 0) || ((((_la - 726)) & ~0x1f) === 0 && ((1 << (_la - 726)) & 1992100141) !== 0) || ((((_la - 765)) & ~0x1f) === 0 && ((1 << (_la - 765)) & 3105527857) !== 0) || ((((_la - 799)) & ~0x1f) === 0 && ((1 << (_la - 799)) & 2795472177) !== 0) || ((((_la - 834)) & ~0x1f) === 0 && ((1 << (_la - 834)) & 3529220103) !== 0) || ((((_la - 869)) & ~0x1f) === 0 && ((1 << (_la - 869)) & 18005) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rawModifiers() {
	    let localctx = new RawModifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, HisyeoParser.RULE_rawModifiers);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 323;
	        _la = this._input.LA(1);
	        if(!(((((_la - 15)) & ~0x1f) === 0 && ((1 << (_la - 15)) & 3221636177) !== 0) || ((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 1355169795) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 1308808385) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 2416395335) !== 0) || ((((_la - 153)) & ~0x1f) === 0 && ((1 << (_la - 153)) & 3349433397) !== 0) || ((((_la - 191)) & ~0x1f) === 0 && ((1 << (_la - 191)) & 3770207383) !== 0) || ((((_la - 224)) & ~0x1f) === 0 && ((1 << (_la - 224)) & 1686635585) !== 0) || ((((_la - 256)) & ~0x1f) === 0 && ((1 << (_la - 256)) & 808488173) !== 0) || ((((_la - 296)) & ~0x1f) === 0 && ((1 << (_la - 296)) & 2428544651) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 88618869) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 2824942721) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2219847821) !== 0) || ((((_la - 431)) & ~0x1f) === 0 && ((1 << (_la - 431)) & 758383389) !== 0) || ((((_la - 465)) & ~0x1f) === 0 && ((1 << (_la - 465)) & 740299865) !== 0) || ((((_la - 508)) & ~0x1f) === 0 && ((1 << (_la - 508)) & 36735057) !== 0) || ((((_la - 540)) & ~0x1f) === 0 && ((1 << (_la - 540)) & 402723907) !== 0) || ((((_la - 572)) & ~0x1f) === 0 && ((1 << (_la - 572)) & 3225567455) !== 0) || ((((_la - 605)) & ~0x1f) === 0 && ((1 << (_la - 605)) & 2216153449) !== 0) || ((((_la - 637)) & ~0x1f) === 0 && ((1 << (_la - 637)) & 1101892873) !== 0) || ((((_la - 669)) & ~0x1f) === 0 && ((1 << (_la - 669)) & 2755170625) !== 0) || ((((_la - 702)) & ~0x1f) === 0 && ((1 << (_la - 702)) & 3258730575) !== 0) || ((((_la - 735)) & ~0x1f) === 0 && ((1 << (_la - 735)) & 2411987001) !== 0) || ((((_la - 772)) & ~0x1f) === 0 && ((1 << (_la - 772)) & 67734155) !== 0) || ((((_la - 805)) & ~0x1f) === 0 && ((1 << (_la - 805)) & 335642921) !== 0) || ((((_la - 837)) & ~0x1f) === 0 && ((1 << (_la - 837)) & 1152387975) !== 0) || ((((_la - 870)) & ~0x1f) === 0 && ((1 << (_la - 870)) & 3077) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connector() {
	    let localctx = new ConnectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, HisyeoParser.RULE_connector);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 325;
	        _la = this._input.LA(1);
	        if(!(_la===61 || _la===117 || _la===609 || _la===840 || _la===868)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

HisyeoParser.EOF = antlr4.Token.EOF;
HisyeoParser.WS = 1;
HisyeoParser.Oiyo = 2;
HisyeoParser.ProperNoun = 3;
HisyeoParser.Comma = 4;
HisyeoParser.Colon = 5;
HisyeoParser.Period = 6;
HisyeoParser.QuestionStart = 7;
HisyeoParser.QuestionEnd = 8;
HisyeoParser.QuotationStart = 9;
HisyeoParser.QuotationEnd = 10;
HisyeoParser.Outo = 11;
HisyeoParser.Okulo = 12;
HisyeoParser.Oudi = 13;
HisyeoParser.Okot = 14;
HisyeoParser.Oksios = 15;
HisyeoParser.Oklumun = 16;
HisyeoParser.Oksun = 17;
HisyeoParser.Ogolol = 18;
HisyeoParser.Ogoge = 19;
HisyeoParser.Ocuo = 20;
HisyeoParser.Otos = 21;
HisyeoParser.Okoxu = 22;
HisyeoParser.Ostok = 23;
HisyeoParser.Odigon = 24;
HisyeoParser.Osyen = 25;
HisyeoParser.Ozuul = 26;
HisyeoParser.Oboki = 27;
HisyeoParser.Obo = 28;
HisyeoParser.Obunyun = 29;
HisyeoParser.Obulu = 30;
HisyeoParser.Ofek = 31;
HisyeoParser.Ofine = 32;
HisyeoParser.Omulto = 33;
HisyeoParser.Onkuol = 34;
HisyeoParser.Ono = 35;
HisyeoParser.Onkonu = 36;
HisyeoParser.Oncemon = 37;
HisyeoParser.Ondo = 38;
HisyeoParser.Ongolo = 39;
HisyeoParser.Ohel = 40;
HisyeoParser.Oitun = 41;
HisyeoParser.Onwoni = 42;
HisyeoParser.Otsotot = 43;
HisyeoParser.Onfibi = 44;
HisyeoParser.Osole = 45;
HisyeoParser.Oltu = 46;
HisyeoParser.Osti = 47;
HisyeoParser.Oldis = 48;
HisyeoParser.Ofo = 49;
HisyeoParser.Ozil = 50;
HisyeoParser.Odon = 51;
HisyeoParser.Obok = 52;
HisyeoParser.Oni = 53;
HisyeoParser.Et = 54;
HisyeoParser.Eson = 55;
HisyeoParser.Onton = 56;
HisyeoParser.Onsu = 57;
HisyeoParser.Eswen = 58;
HisyeoParser.Ole = 59;
HisyeoParser.Eloi = 60;
HisyeoParser.En = 61;
HisyeoParser.Eleke = 62;
HisyeoParser.Eo = 63;
HisyeoParser.Etso = 64;
HisyeoParser.Elentet = 65;
HisyeoParser.Elfu = 66;
HisyeoParser.Ebol = 67;
HisyeoParser.Eme = 68;
HisyeoParser.Efun = 69;
HisyeoParser.Itihos = 70;
HisyeoParser.Enbukun = 71;
HisyeoParser.Enkomon = 72;
HisyeoParser.Eleo = 73;
HisyeoParser.Isbulyol = 74;
HisyeoParser.Eto = 75;
HisyeoParser.Iciwu = 76;
HisyeoParser.Icwon = 77;
HisyeoParser.Istihol = 78;
HisyeoParser.Iwote = 79;
HisyeoParser.Isenso = 80;
HisyeoParser.Infultin = 81;
HisyeoParser.Isbonxu = 82;
HisyeoParser.Isko = 83;
HisyeoParser.Ixolo = 84;
HisyeoParser.Imon = 85;
HisyeoParser.Ibudu = 86;
HisyeoParser.Isibo = 87;
HisyeoParser.Ibuwe = 88;
HisyeoParser.Ilik = 89;
HisyeoParser.In = 90;
HisyeoParser.Ibole = 91;
HisyeoParser.Uklo = 92;
HisyeoParser.Usundul = 93;
HisyeoParser.Inboli = 94;
HisyeoParser.Uskifo = 95;
HisyeoParser.Ubolni = 96;
HisyeoParser.Ile = 97;
HisyeoParser.Ilxizuk = 98;
HisyeoParser.Umo = 99;
HisyeoParser.Ubenus = 100;
HisyeoParser.Ufulit = 101;
HisyeoParser.Undofol = 102;
HisyeoParser.Unbol = 103;
HisyeoParser.Uyo = 104;
HisyeoParser.Ulyo = 105;
HisyeoParser.Unon = 106;
HisyeoParser.U = 107;
HisyeoParser.Unbu = 108;
HisyeoParser.Usen = 109;
HisyeoParser.Ucumi = 110;
HisyeoParser.Usowo = 111;
HisyeoParser.Utok = 112;
HisyeoParser.Umomi = 113;
HisyeoParser.Usmon = 114;
HisyeoParser.Uslek = 115;
HisyeoParser.Unidu = 116;
HisyeoParser.Un = 117;
HisyeoParser.Unhilun = 118;
HisyeoParser.Uncoi = 119;
HisyeoParser.Ulkefi = 120;
HisyeoParser.Ulgukin = 121;
HisyeoParser.Ulonfu = 122;
HisyeoParser.Ulogun = 123;
HisyeoParser.Unfuno = 124;
HisyeoParser.Hokiki = 125;
HisyeoParser.Ulzo = 126;
HisyeoParser.Hoi = 127;
HisyeoParser.Hokoli = 128;
HisyeoParser.Hokuxi = 129;
HisyeoParser.Hosoun = 130;
HisyeoParser.Hoxobe = 131;
HisyeoParser.Hobiyo = 132;
HisyeoParser.Homus = 133;
HisyeoParser.Hondon = 134;
HisyeoParser.Hoos = 135;
HisyeoParser.Hosin = 136;
HisyeoParser.Hondot = 137;
HisyeoParser.Hofo = 138;
HisyeoParser.Hoktun = 139;
HisyeoParser.Hofezi = 140;
HisyeoParser.Hon = 141;
HisyeoParser.Honcou = 142;
HisyeoParser.Holuk = 143;
HisyeoParser.Holmo = 144;
HisyeoParser.Hodoku = 145;
HisyeoParser.Hefin = 146;
HisyeoParser.Henonde = 147;
HisyeoParser.Honyo = 148;
HisyeoParser.Helgo = 149;
HisyeoParser.Helxun = 150;
HisyeoParser.Henelo = 151;
HisyeoParser.Hitsu = 152;
HisyeoParser.Hitnodet = 153;
HisyeoParser.Hismo = 154;
HisyeoParser.Hizon = 155;
HisyeoParser.Hunzidu = 156;
HisyeoParser.Huluko = 157;
HisyeoParser.Huunhu = 158;
HisyeoParser.Huke = 159;
HisyeoParser.Hukun = 160;
HisyeoParser.Husku = 161;
HisyeoParser.Hustun = 162;
HisyeoParser.Hudul = 163;
HisyeoParser.Hunsik = 164;
HisyeoParser.Huzon = 165;
HisyeoParser.Hunsuon = 166;
HisyeoParser.Hiyoli = 167;
HisyeoParser.Huwuncul = 168;
HisyeoParser.Huwu = 169;
HisyeoParser.Hiskunco = 170;
HisyeoParser.Hiklihos = 171;
HisyeoParser.Hulodek = 172;
HisyeoParser.Hulu = 173;
HisyeoParser.Kocko = 174;
HisyeoParser.Kon = 175;
HisyeoParser.Kotilmok = 176;
HisyeoParser.Kobut = 177;
HisyeoParser.Kotonhon = 178;
HisyeoParser.Konxo = 179;
HisyeoParser.Ko = 180;
HisyeoParser.Kontol = 181;
HisyeoParser.Koi = 182;
HisyeoParser.Konbokbo = 183;
HisyeoParser.Konwo = 184;
HisyeoParser.Koto = 185;
HisyeoParser.Kolowu = 186;
HisyeoParser.Kokoku = 187;
HisyeoParser.Kos = 188;
HisyeoParser.Koson = 189;
HisyeoParser.Kotfusu = 190;
HisyeoParser.Koxente = 191;
HisyeoParser.Kotikol = 192;
HisyeoParser.Konen = 193;
HisyeoParser.Komu = 194;
HisyeoParser.Kodus = 195;
HisyeoParser.Kondodu = 196;
HisyeoParser.Kontesto = 197;
HisyeoParser.Kondonse = 198;
HisyeoParser.Kolmudul = 199;
HisyeoParser.Kosmo = 200;
HisyeoParser.Konyec = 201;
HisyeoParser.Konbo = 202;
HisyeoParser.Kelo = 203;
HisyeoParser.Ke = 204;
HisyeoParser.Keskin = 205;
HisyeoParser.Kexik = 206;
HisyeoParser.Kelos = 207;
HisyeoParser.Kiungo = 208;
HisyeoParser.Kistose = 209;
HisyeoParser.Kikolo = 210;
HisyeoParser.Kioso = 211;
HisyeoParser.Kiluku = 212;
HisyeoParser.Kisko = 213;
HisyeoParser.Kinoxi = 214;
HisyeoParser.Kino = 215;
HisyeoParser.Kiso = 216;
HisyeoParser.Kinse = 217;
HisyeoParser.Kuunme = 218;
HisyeoParser.Kinyosel = 219;
HisyeoParser.Kinlik = 220;
HisyeoParser.Kildo = 221;
HisyeoParser.Kiyo = 222;
HisyeoParser.Kut = 223;
HisyeoParser.Kutin = 224;
HisyeoParser.Kududo = 225;
HisyeoParser.Kukwon = 226;
HisyeoParser.Kuon = 227;
HisyeoParser.Kuocyo = 228;
HisyeoParser.Kuu = 229;
HisyeoParser.Kuonlon = 230;
HisyeoParser.Kukmut = 231;
HisyeoParser.Kusowi = 232;
HisyeoParser.Kunonti = 233;
HisyeoParser.Kuzou = 234;
HisyeoParser.Kudu = 235;
HisyeoParser.Kumun = 236;
HisyeoParser.Kuoxi = 237;
HisyeoParser.Kunhiun = 238;
HisyeoParser.Kuncien = 239;
HisyeoParser.Kungiyo = 240;
HisyeoParser.Kunbi = 241;
HisyeoParser.Kuldu = 242;
HisyeoParser.Gosil = 243;
HisyeoParser.Gos = 244;
HisyeoParser.Kulunun = 245;
HisyeoParser.Gomi = 246;
HisyeoParser.Kuyo = 247;
HisyeoParser.Goniso = 248;
HisyeoParser.Gonbu = 249;
HisyeoParser.Gonzil = 250;
HisyeoParser.Gongoxi = 251;
HisyeoParser.Golo = 252;
HisyeoParser.Golfon = 253;
HisyeoParser.Golbinus = 254;
HisyeoParser.Golun = 255;
HisyeoParser.Go = 256;
HisyeoParser.Gocidon = 257;
HisyeoParser.Gonyumon = 258;
HisyeoParser.Gowo = 259;
HisyeoParser.Goyu = 260;
HisyeoParser.Gemolen = 261;
HisyeoParser.Goluo = 262;
HisyeoParser.Gelmis = 263;
HisyeoParser.Gitno = 264;
HisyeoParser.Geko = 265;
HisyeoParser.Gion = 266;
HisyeoParser.Gik = 267;
HisyeoParser.Gito = 268;
HisyeoParser.Gubuyo = 269;
HisyeoParser.Gisgul = 270;
HisyeoParser.Gufis = 271;
HisyeoParser.Gueyu = 272;
HisyeoParser.Guexo = 273;
HisyeoParser.Gundole = 274;
HisyeoParser.Gudolo = 275;
HisyeoParser.Guso = 276;
HisyeoParser.Gunokol = 277;
HisyeoParser.Gumi = 278;
HisyeoParser.Guwolo = 279;
HisyeoParser.Gufoxe = 280;
HisyeoParser.Gufio = 281;
HisyeoParser.Gulu = 282;
HisyeoParser.Tou = 283;
HisyeoParser.Gulobi = 284;
HisyeoParser.Totsi = 285;
HisyeoParser.Touyen = 286;
HisyeoParser.Tohilok = 287;
HisyeoParser.Toswil = 288;
HisyeoParser.Toliyo = 289;
HisyeoParser.Towe = 290;
HisyeoParser.Tonbokcut = 291;
HisyeoParser.Tolen = 292;
HisyeoParser.Toliko = 293;
HisyeoParser.Tolxeto = 294;
HisyeoParser.To = 295;
HisyeoParser.Tocit = 296;
HisyeoParser.Toncoi = 297;
HisyeoParser.Tomos = 298;
HisyeoParser.Tolki = 299;
HisyeoParser.Toxutsi = 300;
HisyeoParser.Tenkin = 301;
HisyeoParser.Tetek = 302;
HisyeoParser.Tigoyo = 303;
HisyeoParser.Telo = 304;
HisyeoParser.Tifulci = 305;
HisyeoParser.Tonko = 306;
HisyeoParser.Tiu = 307;
HisyeoParser.Til = 308;
HisyeoParser.Tiku = 309;
HisyeoParser.Tukwos = 310;
HisyeoParser.Tikel = 311;
HisyeoParser.Tixo = 312;
HisyeoParser.Tubo = 313;
HisyeoParser.Titon = 314;
HisyeoParser.Timiok = 315;
HisyeoParser.Tuluti = 316;
HisyeoParser.Tuek = 317;
HisyeoParser.Tulkolyun = 318;
HisyeoParser.Tut = 319;
HisyeoParser.Tundu = 320;
HisyeoParser.Tuu = 321;
HisyeoParser.Tulokon = 322;
HisyeoParser.Tulono = 323;
HisyeoParser.Cok = 324;
HisyeoParser.Comen = 325;
HisyeoParser.Cokwoli = 326;
HisyeoParser.Cokyen = 327;
HisyeoParser.Conoi = 328;
HisyeoParser.Cosni = 329;
HisyeoParser.Conwebo = 330;
HisyeoParser.Colot = 331;
HisyeoParser.Coufon = 332;
HisyeoParser.Conzodo = 333;
HisyeoParser.Cot = 334;
HisyeoParser.Counton = 335;
HisyeoParser.Cocko = 336;
HisyeoParser.Comel = 337;
HisyeoParser.Conkok = 338;
HisyeoParser.Centik = 339;
HisyeoParser.Ceo = 340;
HisyeoParser.Cenci = 341;
HisyeoParser.Cenbo = 342;
HisyeoParser.Cen = 343;
HisyeoParser.Cixin = 344;
HisyeoParser.Cihou = 345;
HisyeoParser.Cifu = 346;
HisyeoParser.Cizi = 347;
HisyeoParser.Cifulo = 348;
HisyeoParser.Cino = 349;
HisyeoParser.Cingi = 350;
HisyeoParser.Cinobu = 351;
HisyeoParser.Ciwindi = 352;
HisyeoParser.Cies = 353;
HisyeoParser.Ci = 354;
HisyeoParser.Cienxin = 355;
HisyeoParser.Cihun = 356;
HisyeoParser.Cikinil = 357;
HisyeoParser.Cibon = 358;
HisyeoParser.Cigilsu = 359;
HisyeoParser.Citse = 360;
HisyeoParser.Cinzon = 361;
HisyeoParser.Cinli = 362;
HisyeoParser.Cuskido = 363;
HisyeoParser.Cukto = 364;
HisyeoParser.Cunliu = 365;
HisyeoParser.Cuncion = 366;
HisyeoParser.Cuonwun = 367;
HisyeoParser.Cunyu = 368;
HisyeoParser.Cutne = 369;
HisyeoParser.Culono = 370;
HisyeoParser.Cuti = 371;
HisyeoParser.Cui = 372;
HisyeoParser.Cubu = 373;
HisyeoParser.Cuxien = 374;
HisyeoParser.Cudo = 375;
HisyeoParser.Cufo = 376;
HisyeoParser.Cunfu = 377;
HisyeoParser.Cungo = 378;
HisyeoParser.Cundol = 379;
HisyeoParser.Culosun = 380;
HisyeoParser.Sokofu = 381;
HisyeoParser.Sohou = 382;
HisyeoParser.Sokol = 383;
HisyeoParser.Culci = 384;
HisyeoParser.Sotnin = 385;
HisyeoParser.Culul = 386;
HisyeoParser.Soden = 387;
HisyeoParser.Sodolun = 388;
HisyeoParser.Socok = 389;
HisyeoParser.Sodilu = 390;
HisyeoParser.Sobole = 391;
HisyeoParser.Sobuni = 392;
HisyeoParser.Sobis = 393;
HisyeoParser.Sonkon = 394;
HisyeoParser.Somo = 395;
HisyeoParser.Sofin = 396;
HisyeoParser.Sonti = 397;
HisyeoParser.Solilo = 398;
HisyeoParser.Solwoc = 399;
HisyeoParser.Sotun = 400;
HisyeoParser.Sonsus = 401;
HisyeoParser.Sohouk = 402;
HisyeoParser.Sobo = 403;
HisyeoParser.Solu = 404;
HisyeoParser.Ses = 405;
HisyeoParser.Sondonos = 406;
HisyeoParser.Soltustik = 407;
HisyeoParser.Senwic = 408;
HisyeoParser.Seki = 409;
HisyeoParser.Seloho = 410;
HisyeoParser.Sedu = 411;
HisyeoParser.Semoi = 412;
HisyeoParser.Sekiton = 413;
HisyeoParser.Selbo = 414;
HisyeoParser.Siskin = 415;
HisyeoParser.Senzo = 416;
HisyeoParser.Sel = 417;
HisyeoParser.Sityo = 418;
HisyeoParser.Si = 419;
HisyeoParser.Siokbi = 420;
HisyeoParser.Sieto = 421;
HisyeoParser.Sinsi = 422;
HisyeoParser.Sikot = 423;
HisyeoParser.Siufo = 424;
HisyeoParser.Sinexis = 425;
HisyeoParser.Sintokmo = 426;
HisyeoParser.Sikin = 427;
HisyeoParser.Suhot = 428;
HisyeoParser.Sukyunik = 429;
HisyeoParser.Sufoun = 430;
HisyeoParser.Sumon = 431;
HisyeoParser.Sundibot = 432;
HisyeoParser.Sunbulno = 433;
HisyeoParser.Sunyotni = 434;
HisyeoParser.Suit = 435;
HisyeoParser.Sutuo = 436;
HisyeoParser.Suoxic = 437;
HisyeoParser.Suson = 438;
HisyeoParser.Xoinbo = 439;
HisyeoParser.Subol = 440;
HisyeoParser.Xohofec = 441;
HisyeoParser.Sunbidu = 442;
HisyeoParser.Suko = 443;
HisyeoParser.Sun = 444;
HisyeoParser.Xofo = 445;
HisyeoParser.Xokulu = 446;
HisyeoParser.Xobo = 447;
HisyeoParser.Xontun = 448;
HisyeoParser.Xobek = 449;
HisyeoParser.Xokon = 450;
HisyeoParser.Xonluk = 451;
HisyeoParser.Xoboi = 452;
HisyeoParser.Xomutlo = 453;
HisyeoParser.Xe = 454;
HisyeoParser.Xowose = 455;
HisyeoParser.Xolu = 456;
HisyeoParser.Xecinoc = 457;
HisyeoParser.Xolxili = 458;
HisyeoParser.Xemetsen = 459;
HisyeoParser.Xon = 460;
HisyeoParser.Xeti = 461;
HisyeoParser.Xefizec = 462;
HisyeoParser.Xingo = 463;
HisyeoParser.Xifon = 464;
HisyeoParser.Xentil = 465;
HisyeoParser.Xiufu = 466;
HisyeoParser.Xiulo = 467;
HisyeoParser.Xiko = 468;
HisyeoParser.Xidetli = 469;
HisyeoParser.Xixulko = 470;
HisyeoParser.Xisu = 471;
HisyeoParser.Ximol = 472;
HisyeoParser.Xincuon = 473;
HisyeoParser.Ximu = 474;
HisyeoParser.Xulmindo = 475;
HisyeoParser.Xiwon = 476;
HisyeoParser.Xiyocu = 477;
HisyeoParser.Xuto = 478;
HisyeoParser.Xuk = 479;
HisyeoParser.Xusten = 480;
HisyeoParser.Doi = 481;
HisyeoParser.Xunyu = 482;
HisyeoParser.Xuxok = 483;
HisyeoParser.Doinbi = 484;
HisyeoParser.Doho = 485;
HisyeoParser.Dohil = 486;
HisyeoParser.Doicel = 487;
HisyeoParser.Dokdogo = 488;
HisyeoParser.Dodou = 489;
HisyeoParser.Doknu = 490;
HisyeoParser.Dondun = 491;
HisyeoParser.Dokcon = 492;
HisyeoParser.Donus = 493;
HisyeoParser.Dode = 494;
HisyeoParser.Docui = 495;
HisyeoParser.Dostoc = 496;
HisyeoParser.Donuxin = 497;
HisyeoParser.Deku = 498;
HisyeoParser.Deko = 499;
HisyeoParser.Des = 500;
HisyeoParser.Den = 501;
HisyeoParser.Di = 502;
HisyeoParser.Dibo = 503;
HisyeoParser.Dizel = 504;
HisyeoParser.Detoi = 505;
HisyeoParser.Denemek = 506;
HisyeoParser.Dinci = 507;
HisyeoParser.Didozu = 508;
HisyeoParser.Dinzou = 509;
HisyeoParser.Diyonde = 510;
HisyeoParser.Duuhon = 511;
HisyeoParser.Dile = 512;
HisyeoParser.Dus = 513;
HisyeoParser.Dukwelit = 514;
HisyeoParser.Dumoko = 515;
HisyeoParser.Duwoni = 516;
HisyeoParser.Dui = 517;
HisyeoParser.Duuncit = 518;
HisyeoParser.Dusul = 519;
HisyeoParser.Dubono = 520;
HisyeoParser.Dustu = 521;
HisyeoParser.Dungo = 522;
HisyeoParser.Dundon = 523;
HisyeoParser.Zoso = 524;
HisyeoParser.Zomo = 525;
HisyeoParser.Zoston = 526;
HisyeoParser.Zomi = 527;
HisyeoParser.Zonubi = 528;
HisyeoParser.Zomuni = 529;
HisyeoParser.Zonwul = 530;
HisyeoParser.Zowo = 531;
HisyeoParser.Zohit = 532;
HisyeoParser.Zoi = 533;
HisyeoParser.Zoloni = 534;
HisyeoParser.Zohun = 535;
HisyeoParser.Zoli = 536;
HisyeoParser.Zogoc = 537;
HisyeoParser.Zotesto = 538;
HisyeoParser.Ze = 539;
HisyeoParser.Zelen = 540;
HisyeoParser.Zensi = 541;
HisyeoParser.Zesto = 542;
HisyeoParser.Zik = 543;
HisyeoParser.Zizime = 544;
HisyeoParser.Ziyon = 545;
HisyeoParser.Zigil = 546;
HisyeoParser.Zinkon = 547;
HisyeoParser.Zicou = 548;
HisyeoParser.Zixitu = 549;
HisyeoParser.Zingu = 550;
HisyeoParser.Ziziyo = 551;
HisyeoParser.Ziwit = 552;
HisyeoParser.Zuko = 553;
HisyeoParser.Zusbot = 554;
HisyeoParser.Zuwobu = 555;
HisyeoParser.Zilyois = 556;
HisyeoParser.Zungo = 557;
HisyeoParser.Zuto = 558;
HisyeoParser.Zuntulu = 559;
HisyeoParser.Zuhu = 560;
HisyeoParser.Zuyi = 561;
HisyeoParser.Boifon = 562;
HisyeoParser.Zunlo = 563;
HisyeoParser.Boit = 564;
HisyeoParser.Boholon = 565;
HisyeoParser.Bogo = 566;
HisyeoParser.Botuk = 567;
HisyeoParser.Bodi = 568;
HisyeoParser.Bostofis = 569;
HisyeoParser.Boxo = 570;
HisyeoParser.Boboun = 571;
HisyeoParser.Bono = 572;
HisyeoParser.Botyoto = 573;
HisyeoParser.Bonoxo = 574;
HisyeoParser.Bolimot = 575;
HisyeoParser.Bongosi = 576;
HisyeoParser.Bole = 577;
HisyeoParser.Boyok = 578;
HisyeoParser.Bomoge = 579;
HisyeoParser.Bokofoc = 580;
HisyeoParser.Bolce = 581;
HisyeoParser.Boklon = 582;
HisyeoParser.Bosol = 583;
HisyeoParser.Bonti = 584;
HisyeoParser.Bokbun = 585;
HisyeoParser.Bolute = 586;
HisyeoParser.Bolfele = 587;
HisyeoParser.Betido = 588;
HisyeoParser.Belisis = 589;
HisyeoParser.Besol = 590;
HisyeoParser.Belexu = 591;
HisyeoParser.Beudo = 592;
HisyeoParser.Beiku = 593;
HisyeoParser.Besu = 594;
HisyeoParser.Belete = 595;
HisyeoParser.Besnehot = 596;
HisyeoParser.Bindu = 597;
HisyeoParser.Bi = 598;
HisyeoParser.Binleo = 599;
HisyeoParser.Bitun = 600;
HisyeoParser.Bioli = 601;
HisyeoParser.Bilit = 602;
HisyeoParser.Bikonte = 603;
HisyeoParser.Biomu = 604;
HisyeoParser.Bicuon = 605;
HisyeoParser.Biek = 606;
HisyeoParser.Bit = 607;
HisyeoParser.Bisu = 608;
HisyeoParser.Bine = 609;
HisyeoParser.Bibok = 610;
HisyeoParser.Binhun = 611;
HisyeoParser.Binton = 612;
HisyeoParser.Buku = 613;
HisyeoParser.Bucono = 614;
HisyeoParser.Buswelin = 615;
HisyeoParser.Buswen = 616;
HisyeoParser.Bunxin = 617;
HisyeoParser.Buyencok = 618;
HisyeoParser.Bundu = 619;
HisyeoParser.Bugot = 620;
HisyeoParser.Buihi = 621;
HisyeoParser.Busin = 622;
HisyeoParser.Buslu = 623;
HisyeoParser.Budogo = 624;
HisyeoParser.Budiko = 625;
HisyeoParser.Buzok = 626;
HisyeoParser.Bumi = 627;
HisyeoParser.Buntut = 628;
HisyeoParser.Bunduki = 629;
HisyeoParser.Fout = 630;
HisyeoParser.Bulo = 631;
HisyeoParser.Fohoso = 632;
HisyeoParser.Bulusi = 633;
HisyeoParser.Fos = 634;
HisyeoParser.Bemon = 635;
HisyeoParser.Bilus = 636;
HisyeoParser.But = 637;
HisyeoParser.Fonolon = 638;
HisyeoParser.Foxo = 639;
HisyeoParser.Fonmot = 640;
HisyeoParser.Fonxin = 641;
HisyeoParser.Folo = 642;
HisyeoParser.Foko = 643;
HisyeoParser.Fohon = 644;
HisyeoParser.Fogicin = 645;
HisyeoParser.Fodoloc = 646;
HisyeoParser.Folni = 647;
HisyeoParser.Fonfuk = 648;
HisyeoParser.Folun = 649;
HisyeoParser.Fecko = 650;
HisyeoParser.Fikwun = 651;
HisyeoParser.Felkono = 652;
HisyeoParser.Felcin = 653;
HisyeoParser.Fenuo = 654;
HisyeoParser.Fildonbun = 655;
HisyeoParser.Fiectu = 656;
HisyeoParser.Fisun = 657;
HisyeoParser.Fitikos = 658;
HisyeoParser.Fiyuxit = 659;
HisyeoParser.Fimosyos = 660;
HisyeoParser.Ficwo = 661;
HisyeoParser.Filo = 662;
HisyeoParser.Fizi = 663;
HisyeoParser.Fui = 664;
HisyeoParser.Fiyen = 665;
HisyeoParser.Fun = 666;
HisyeoParser.Funsut = 667;
HisyeoParser.Fulkoi = 668;
HisyeoParser.Funlit = 669;
HisyeoParser.Futsun = 670;
HisyeoParser.Fuongok = 671;
HisyeoParser.Fukuxi = 672;
HisyeoParser.Fuus = 673;
HisyeoParser.Fuxubin = 674;
HisyeoParser.Funbetsi = 675;
HisyeoParser.Funlok = 676;
HisyeoParser.Fiki = 677;
HisyeoParser.Mokon = 678;
HisyeoParser.Funbo = 679;
HisyeoParser.Motuo = 680;
HisyeoParser.Moskul = 681;
HisyeoParser.Mocko = 682;
HisyeoParser.Mozulis = 683;
HisyeoParser.Moziko = 684;
HisyeoParser.Motsi = 685;
HisyeoParser.Mozun = 686;
HisyeoParser.Monodo = 687;
HisyeoParser.Momoki = 688;
HisyeoParser.Moxo = 689;
HisyeoParser.Montuksol = 690;
HisyeoParser.Mongo = 691;
HisyeoParser.Moi = 692;
HisyeoParser.Mokofo = 693;
HisyeoParser.Moto = 694;
HisyeoParser.Mokwon = 695;
HisyeoParser.Motowo = 696;
HisyeoParser.Motifo = 697;
HisyeoParser.Mocibo = 698;
HisyeoParser.Motsile = 699;
HisyeoParser.Mofi = 700;
HisyeoParser.Moniso = 701;
HisyeoParser.Mefus = 702;
HisyeoParser.Metlios = 703;
HisyeoParser.Meduson = 704;
HisyeoParser.Monbili = 705;
HisyeoParser.Menyuu = 706;
HisyeoParser.Menus = 707;
HisyeoParser.Mixofo = 708;
HisyeoParser.Meloc = 709;
HisyeoParser.Misli = 710;
HisyeoParser.Minyoto = 711;
HisyeoParser.Minyo = 712;
HisyeoParser.Miou = 713;
HisyeoParser.Mikdol = 714;
HisyeoParser.Miebil = 715;
HisyeoParser.Miteten = 716;
HisyeoParser.Mitmo = 717;
HisyeoParser.Micin = 718;
HisyeoParser.Miencok = 719;
HisyeoParser.Mile = 720;
HisyeoParser.Mihuon = 721;
HisyeoParser.Muilo = 722;
HisyeoParser.Mistu = 723;
HisyeoParser.Muni = 724;
HisyeoParser.Munyufo = 725;
HisyeoParser.Mutyu = 726;
HisyeoParser.Muun = 727;
HisyeoParser.Muesi = 728;
HisyeoParser.Mukonun = 729;
HisyeoParser.Mut = 730;
HisyeoParser.Muhoyon = 731;
HisyeoParser.Mukno = 732;
HisyeoParser.Mustokin = 733;
HisyeoParser.Muxi = 734;
HisyeoParser.Mufeu = 735;
HisyeoParser.Noi = 736;
HisyeoParser.Noo = 737;
HisyeoParser.Mulu = 738;
HisyeoParser.Nokdo = 739;
HisyeoParser.Muncu = 740;
HisyeoParser.Muncoti = 741;
HisyeoParser.Nouku = 742;
HisyeoParser.Nocido = 743;
HisyeoParser.Nozi = 744;
HisyeoParser.Non = 745;
HisyeoParser.Nomu = 746;
HisyeoParser.Noso = 747;
HisyeoParser.Nonku = 748;
HisyeoParser.Nodu = 749;
HisyeoParser.Noyo = 750;
HisyeoParser.Nonto = 751;
HisyeoParser.Neigin = 752;
HisyeoParser.No = 753;
HisyeoParser.Nokso = 754;
HisyeoParser.Noilu = 755;
HisyeoParser.Nec = 756;
HisyeoParser.Nexe = 757;
HisyeoParser.Nebu = 758;
HisyeoParser.Nendol = 759;
HisyeoParser.Nexodi = 760;
HisyeoParser.Neos = 761;
HisyeoParser.Nelo = 762;
HisyeoParser.Ni = 763;
HisyeoParser.Nenko = 764;
HisyeoParser.Nicu = 765;
HisyeoParser.Nikful = 766;
HisyeoParser.Niswi = 767;
HisyeoParser.Niwos = 768;
HisyeoParser.Nixin = 769;
HisyeoParser.Nilol = 770;
HisyeoParser.Nio = 771;
HisyeoParser.Niok = 772;
HisyeoParser.Niecni = 773;
HisyeoParser.Nimu = 774;
HisyeoParser.Nubuso = 775;
HisyeoParser.Nucoto = 776;
HisyeoParser.Nukulo = 777;
HisyeoParser.Niltugu = 778;
HisyeoParser.Nungo = 779;
HisyeoParser.Numuno = 780;
HisyeoParser.Nulto = 781;
HisyeoParser.Nuluhu = 782;
HisyeoParser.Wohi = 783;
HisyeoParser.Nuyo = 784;
HisyeoParser.Wokut = 785;
HisyeoParser.Nus = 786;
HisyeoParser.Nulun = 787;
HisyeoParser.Wodino = 788;
HisyeoParser.Wokto = 789;
HisyeoParser.Wofok = 790;
HisyeoParser.Wonkuk = 791;
HisyeoParser.Wobi = 792;
HisyeoParser.Woyu = 793;
HisyeoParser.Woloko = 794;
HisyeoParser.Wedo = 795;
HisyeoParser.Wowoe = 796;
HisyeoParser.Weilun = 797;
HisyeoParser.Welto = 798;
HisyeoParser.Wolik = 799;
HisyeoParser.Weko = 800;
HisyeoParser.Wetodu = 801;
HisyeoParser.Wekeso = 802;
HisyeoParser.Wexon = 803;
HisyeoParser.Wikse = 804;
HisyeoParser.Winit = 805;
HisyeoParser.Wetu = 806;
HisyeoParser.Wixonu = 807;
HisyeoParser.Wixes = 808;
HisyeoParser.Wibolo = 809;
HisyeoParser.Wili = 810;
HisyeoParser.Weloi = 811;
HisyeoParser.Wuitsi = 812;
HisyeoParser.Wuktomu = 813;
HisyeoParser.Wuto = 814;
HisyeoParser.Wutun = 815;
HisyeoParser.Wik = 816;
HisyeoParser.Wiluwo = 817;
HisyeoParser.Wulus = 818;
HisyeoParser.Wuot = 819;
HisyeoParser.Losol = 820;
HisyeoParser.Lohot = 821;
HisyeoParser.Lozido = 822;
HisyeoParser.Lobotol = 823;
HisyeoParser.Longi = 824;
HisyeoParser.Lozo = 825;
HisyeoParser.Lon = 826;
HisyeoParser.Loicok = 827;
HisyeoParser.Lono = 828;
HisyeoParser.Lotfen = 829;
HisyeoParser.Lolu = 830;
HisyeoParser.Londuluk = 831;
HisyeoParser.Lozic = 832;
HisyeoParser.Loc = 833;
HisyeoParser.Lonkin = 834;
HisyeoParser.Leknek = 835;
HisyeoParser.Lexetko = 836;
HisyeoParser.Legefu = 837;
HisyeoParser.Lefotol = 838;
HisyeoParser.Lionxin = 839;
HisyeoParser.Lekin = 840;
HisyeoParser.Liun = 841;
HisyeoParser.Liubit = 842;
HisyeoParser.Li = 843;
HisyeoParser.Liule = 844;
HisyeoParser.Lis = 845;
HisyeoParser.Lito = 846;
HisyeoParser.Libu = 847;
HisyeoParser.Litiwe = 848;
HisyeoParser.Listo = 849;
HisyeoParser.Luhu = 850;
HisyeoParser.Limien = 851;
HisyeoParser.Lufono = 852;
HisyeoParser.Lismu = 853;
HisyeoParser.Luicu = 854;
HisyeoParser.Lunsol = 855;
HisyeoParser.Luok = 856;
HisyeoParser.Luko = 857;
HisyeoParser.Lucik = 858;
HisyeoParser.Lucku = 859;
HisyeoParser.Youmok = 860;
HisyeoParser.Youti = 861;
HisyeoParser.Yokuntik = 862;
HisyeoParser.Lunti = 863;
HisyeoParser.Yoskinyo = 864;
HisyeoParser.Yogo = 865;
HisyeoParser.Yosten = 866;
HisyeoParser.Yobe = 867;
HisyeoParser.Yodo = 868;
HisyeoParser.Yofuk = 869;
HisyeoParser.Youli = 870;
HisyeoParser.Yoldun = 871;
HisyeoParser.Yonlus = 872;
HisyeoParser.Youxin = 873;
HisyeoParser.Yok = 874;
HisyeoParser.Yocno = 875;
HisyeoParser.Yon = 876;
HisyeoParser.Ye = 877;
HisyeoParser.Yone = 878;
HisyeoParser.Yinyunci = 879;
HisyeoParser.Yinsuk = 880;
HisyeoParser.Yumon = 881;
HisyeoParser.Yundou = 882;
HisyeoParser.Yukwoi = 883;
HisyeoParser.Yunlon = 884;

HisyeoParser.RULE_sentences = 0;
HisyeoParser.RULE_sentencePunctuation = 1;
HisyeoParser.RULE_sentence = 2;
HisyeoParser.RULE_restrictedSentence = 3;
HisyeoParser.RULE_freeAgentConstituent = 4;
HisyeoParser.RULE_constituent = 5;
HisyeoParser.RULE_adjectivalClause = 6;
HisyeoParser.RULE_adjectivalNucleus = 7;
HisyeoParser.RULE_subordinateClause = 8;
HisyeoParser.RULE_transitiveVerb = 9;
HisyeoParser.RULE_quantity = 10;
HisyeoParser.RULE_prepParticle = 11;
HisyeoParser.RULE_nounPhrase = 12;
HisyeoParser.RULE_verbalNounPhrase = 13;
HisyeoParser.RULE_prepPhrase = 14;
HisyeoParser.RULE_nominalNucleus = 15;
HisyeoParser.RULE_verbalParticles = 16;
HisyeoParser.RULE_verbalNoun = 17;
HisyeoParser.RULE_verbMarker = 18;
HisyeoParser.RULE_verbModifier = 19;
HisyeoParser.RULE_interjection = 20;
HisyeoParser.RULE_contentParticles = 21;
HisyeoParser.RULE_baseNoun = 22;
HisyeoParser.RULE_baseModifier = 23;
HisyeoParser.RULE_relativeQuantity = 24;
HisyeoParser.RULE_nominalQuantity = 25;
HisyeoParser.RULE_postposition = 26;
HisyeoParser.RULE_pronoun = 27;
HisyeoParser.RULE_rawVerbs = 28;
HisyeoParser.RULE_rawNouns = 29;
HisyeoParser.RULE_rawModifiers = 30;
HisyeoParser.RULE_connector = 31;

class SentencesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_sentences;
    }

	sentence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SentenceContext);
	    } else {
	        return this.getTypedRuleContext(SentenceContext,i);
	    }
	};

	QuestionStart = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HisyeoParser.QuestionStart);
	    } else {
	        return this.getToken(HisyeoParser.QuestionStart, i);
	    }
	};


	sentencePunctuation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SentencePunctuationContext);
	    } else {
	        return this.getTypedRuleContext(SentencePunctuationContext,i);
	    }
	};

	connector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConnectorContext);
	    } else {
	        return this.getTypedRuleContext(ConnectorContext,i);
	    }
	};

	restrictedSentence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RestrictedSentenceContext);
	    } else {
	        return this.getTypedRuleContext(RestrictedSentenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterSentences(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitSentences(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitSentences(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SentencePunctuationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_sentencePunctuation;
    }

	Period() {
	    return this.getToken(HisyeoParser.Period, 0);
	};

	Colon() {
	    return this.getToken(HisyeoParser.Colon, 0);
	};

	QuestionEnd() {
	    return this.getToken(HisyeoParser.QuestionEnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterSentencePunctuation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitSentencePunctuation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitSentencePunctuation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SentenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_sentence;
    }

	freeAgentConstituent() {
	    return this.getTypedRuleContext(FreeAgentConstituentContext,0);
	};

	constituent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstituentContext);
	    } else {
	        return this.getTypedRuleContext(ConstituentContext,i);
	    }
	};

	postposition() {
	    return this.getTypedRuleContext(PostpositionContext,0);
	};

	restrictedSentence() {
	    return this.getTypedRuleContext(RestrictedSentenceContext,0);
	};

	connector() {
	    return this.getTypedRuleContext(ConnectorContext,0);
	};

	interjection() {
	    return this.getTypedRuleContext(InterjectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterSentence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitSentence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitSentence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestrictedSentenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_restrictedSentence;
    }

	constituent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstituentContext);
	    } else {
	        return this.getTypedRuleContext(ConstituentContext,i);
	    }
	};

	postposition() {
	    return this.getTypedRuleContext(PostpositionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterRestrictedSentence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitRestrictedSentence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitRestrictedSentence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FreeAgentConstituentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_freeAgentConstituent;
    }

	nounPhrase() {
	    return this.getTypedRuleContext(NounPhraseContext,0);
	};

	connector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConnectorContext);
	    } else {
	        return this.getTypedRuleContext(ConnectorContext,i);
	    }
	};

	prepPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrepPhraseContext);
	    } else {
	        return this.getTypedRuleContext(PrepPhraseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterFreeAgentConstituent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitFreeAgentConstituent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitFreeAgentConstituent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstituentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_constituent;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PrepositionContext extends ConstituentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	prepParticle() {
	    return this.getTypedRuleContext(PrepParticleContext,0);
	};

	prepPhrase() {
	    return this.getTypedRuleContext(PrepPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterPreposition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitPreposition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitPreposition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

HisyeoParser.PrepositionContext = PrepositionContext;

class VerbalPrepositionContext extends ConstituentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	transitiveVerb() {
	    return this.getTypedRuleContext(TransitiveVerbContext,0);
	};

	verbMarker() {
	    return this.getTypedRuleContext(VerbMarkerContext,0);
	};

	verbModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VerbModifierContext);
	    } else {
	        return this.getTypedRuleContext(VerbModifierContext,i);
	    }
	};

	prepPhrase() {
	    return this.getTypedRuleContext(PrepPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterVerbalPreposition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitVerbalPreposition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitVerbalPreposition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

HisyeoParser.VerbalPrepositionContext = VerbalPrepositionContext;

class AdjectivalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_adjectivalClause;
    }

	Ye() {
	    return this.getToken(HisyeoParser.Ye, 0);
	};

	adjectivalNucleus() {
	    return this.getTypedRuleContext(AdjectivalNucleusContext,0);
	};

	subordinateClause() {
	    return this.getTypedRuleContext(SubordinateClauseContext,0);
	};

	Et() {
	    return this.getToken(HisyeoParser.Et, 0);
	};

	adjectivalClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdjectivalClauseContext);
	    } else {
	        return this.getTypedRuleContext(AdjectivalClauseContext,i);
	    }
	};

	nominalNucleus() {
	    return this.getTypedRuleContext(NominalNucleusContext,0);
	};

	Comma() {
	    return this.getToken(HisyeoParser.Comma, 0);
	};

	postposition() {
	    return this.getTypedRuleContext(PostpositionContext,0);
	};

	ProperNoun() {
	    return this.getToken(HisyeoParser.ProperNoun, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterAdjectivalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitAdjectivalClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitAdjectivalClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdjectivalNucleusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_adjectivalNucleus;
    }

	nominalNucleus() {
	    return this.getTypedRuleContext(NominalNucleusContext,0);
	};

	rawVerbs() {
	    return this.getTypedRuleContext(RawVerbsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterAdjectivalNucleus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitAdjectivalNucleus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitAdjectivalNucleus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubordinateClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_subordinateClause;
    }

	Fos() {
	    return this.getToken(HisyeoParser.Fos, 0);
	};

	sentence() {
	    return this.getTypedRuleContext(SentenceContext,0);
	};

	prepParticle() {
	    return this.getTypedRuleContext(PrepParticleContext,0);
	};

	Xe() {
	    return this.getToken(HisyeoParser.Xe, 0);
	};

	restrictedSentence() {
	    return this.getTypedRuleContext(RestrictedSentenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterSubordinateClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitSubordinateClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitSubordinateClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransitiveVerbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_transitiveVerb;
    }

	rawVerbs() {
	    return this.getTypedRuleContext(RawVerbsContext,0);
	};

	Li() {
	    return this.getToken(HisyeoParser.Li, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterTransitiveVerb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitTransitiveVerb(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitTransitiveVerb(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuantityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_quantity;
    }

	relativeQuantity() {
	    return this.getTypedRuleContext(RelativeQuantityContext,0);
	};

	nominalQuantity = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NominalQuantityContext);
	    } else {
	        return this.getTypedRuleContext(NominalQuantityContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterQuantity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitQuantity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitQuantity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrepParticleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_prepParticle;
    }

	U() {
	    return this.getToken(HisyeoParser.U, 0);
	};

	Ole() {
	    return this.getToken(HisyeoParser.Ole, 0);
	};

	Noi() {
	    return this.getToken(HisyeoParser.Noi, 0);
	};

	Hon() {
	    return this.getToken(HisyeoParser.Hon, 0);
	};

	Til() {
	    return this.getToken(HisyeoParser.Til, 0);
	};

	Hoi() {
	    return this.getToken(HisyeoParser.Hoi, 0);
	};

	To() {
	    return this.getToken(HisyeoParser.To, 0);
	};

	Mut() {
	    return this.getToken(HisyeoParser.Mut, 0);
	};

	Ofek() {
	    return this.getToken(HisyeoParser.Ofek, 0);
	};

	Sun() {
	    return this.getToken(HisyeoParser.Sun, 0);
	};

	Bi() {
	    return this.getToken(HisyeoParser.Bi, 0);
	};

	Nenko() {
	    return this.getToken(HisyeoParser.Nenko, 0);
	};

	Oldis() {
	    return this.getToken(HisyeoParser.Oldis, 0);
	};

	Den() {
	    return this.getToken(HisyeoParser.Den, 0);
	};

	Lon() {
	    return this.getToken(HisyeoParser.Lon, 0);
	};

	Gitno() {
	    return this.getToken(HisyeoParser.Gitno, 0);
	};

	Misli() {
	    return this.getToken(HisyeoParser.Misli, 0);
	};

	Ilik() {
	    return this.getToken(HisyeoParser.Ilik, 0);
	};

	Cihou() {
	    return this.getToken(HisyeoParser.Cihou, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterPrepParticle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitPrepParticle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitPrepParticle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NounPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_nounPhrase;
    }

	subordinateClause() {
	    return this.getTypedRuleContext(SubordinateClauseContext,0);
	};

	quantity() {
	    return this.getTypedRuleContext(QuantityContext,0);
	};

	Comma() {
	    return this.getToken(HisyeoParser.Comma, 0);
	};

	adjectivalClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdjectivalClauseContext);
	    } else {
	        return this.getTypedRuleContext(AdjectivalClauseContext,i);
	    }
	};

	nominalNucleus() {
	    return this.getTypedRuleContext(NominalNucleusContext,0);
	};

	QuotationStart() {
	    return this.getToken(HisyeoParser.QuotationStart, 0);
	};

	sentences() {
	    return this.getTypedRuleContext(SentencesContext,0);
	};

	QuotationEnd() {
	    return this.getToken(HisyeoParser.QuotationEnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterNounPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitNounPhrase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitNounPhrase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VerbalNounPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_verbalNounPhrase;
    }

	rawVerbs() {
	    return this.getTypedRuleContext(RawVerbsContext,0);
	};

	quantity() {
	    return this.getTypedRuleContext(QuantityContext,0);
	};

	adjectivalClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdjectivalClauseContext);
	    } else {
	        return this.getTypedRuleContext(AdjectivalClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterVerbalNounPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitVerbalNounPhrase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitVerbalNounPhrase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrepPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_prepPhrase;
    }

	nounPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NounPhraseContext);
	    } else {
	        return this.getTypedRuleContext(NounPhraseContext,i);
	    }
	};

	verbalNounPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VerbalNounPhraseContext);
	    } else {
	        return this.getTypedRuleContext(VerbalNounPhraseContext,i);
	    }
	};

	connector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConnectorContext);
	    } else {
	        return this.getTypedRuleContext(ConnectorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterPrepPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitPrepPhrase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitPrepPhrase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NominalNucleusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_nominalNucleus;
    }

	pronoun() {
	    return this.getTypedRuleContext(PronounContext,0);
	};

	relativeQuantity() {
	    return this.getTypedRuleContext(RelativeQuantityContext,0);
	};

	nominalQuantity() {
	    return this.getTypedRuleContext(NominalQuantityContext,0);
	};

	baseNoun() {
	    return this.getTypedRuleContext(BaseNounContext,0);
	};

	verbalNoun() {
	    return this.getTypedRuleContext(VerbalNounContext,0);
	};

	baseModifier() {
	    return this.getTypedRuleContext(BaseModifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterNominalNucleus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitNominalNucleus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitNominalNucleus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VerbalParticlesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_verbalParticles;
    }

	In() {
	    return this.getToken(HisyeoParser.In, 0);
	};

	Des() {
	    return this.getToken(HisyeoParser.Des, 0);
	};

	Oni() {
	    return this.getToken(HisyeoParser.Oni, 0);
	};

	Foko() {
	    return this.getToken(HisyeoParser.Foko, 0);
	};

	Kon() {
	    return this.getToken(HisyeoParser.Kon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterVerbalParticles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitVerbalParticles(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitVerbalParticles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VerbalNounContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_verbalNoun;
    }

	verbalParticles() {
	    return this.getTypedRuleContext(VerbalParticlesContext,0);
	};

	rawVerbs() {
	    return this.getTypedRuleContext(RawVerbsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterVerbalNoun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitVerbalNoun(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitVerbalNoun(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VerbMarkerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_verbMarker;
    }

	Koi() {
	    return this.getToken(HisyeoParser.Koi, 0);
	};

	Bit() {
	    return this.getToken(HisyeoParser.Bit, 0);
	};

	Kuu() {
	    return this.getToken(HisyeoParser.Kuu, 0);
	};

	Ke() {
	    return this.getToken(HisyeoParser.Ke, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterVerbMarker(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitVerbMarker(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitVerbMarker(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VerbModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_verbModifier;
    }

	Yok() {
	    return this.getToken(HisyeoParser.Yok, 0);
	};

	Eo() {
	    return this.getToken(HisyeoParser.Eo, 0);
	};

	Si() {
	    return this.getToken(HisyeoParser.Si, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterVerbModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitVerbModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitVerbModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterjectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_interjection;
    }

	Bioli() {
	    return this.getToken(HisyeoParser.Bioli, 0);
	};

	Oiyo() {
	    return this.getToken(HisyeoParser.Oiyo, 0);
	};

	Yok() {
	    return this.getToken(HisyeoParser.Yok, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterInterjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitInterjection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitInterjection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContentParticlesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_contentParticles;
    }

	In() {
	    return this.getToken(HisyeoParser.In, 0);
	};

	Des() {
	    return this.getToken(HisyeoParser.Des, 0);
	};

	Oni() {
	    return this.getToken(HisyeoParser.Oni, 0);
	};

	Foko() {
	    return this.getToken(HisyeoParser.Foko, 0);
	};

	Kon() {
	    return this.getToken(HisyeoParser.Kon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterContentParticles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitContentParticles(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitContentParticles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BaseNounContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_baseNoun;
    }

	rawNouns() {
	    return this.getTypedRuleContext(RawNounsContext,0);
	};

	contentParticles() {
	    return this.getTypedRuleContext(ContentParticlesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterBaseNoun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitBaseNoun(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitBaseNoun(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BaseModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_baseModifier;
    }

	rawModifiers() {
	    return this.getTypedRuleContext(RawModifiersContext,0);
	};

	contentParticles() {
	    return this.getTypedRuleContext(ContentParticlesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterBaseModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitBaseModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitBaseModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelativeQuantityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_relativeQuantity;
    }

	Odigon() {
	    return this.getToken(HisyeoParser.Odigon, 0);
	};

	Eswen() {
	    return this.getToken(HisyeoParser.Eswen, 0);
	};

	Eto() {
	    return this.getToken(HisyeoParser.Eto, 0);
	};

	Ilik() {
	    return this.getToken(HisyeoParser.Ilik, 0);
	};

	Cihou() {
	    return this.getToken(HisyeoParser.Cihou, 0);
	};

	Xokon() {
	    return this.getToken(HisyeoParser.Xokon, 0);
	};

	Zotesto() {
	    return this.getToken(HisyeoParser.Zotesto, 0);
	};

	Buzok() {
	    return this.getToken(HisyeoParser.Buzok, 0);
	};

	Felcin() {
	    return this.getToken(HisyeoParser.Felcin, 0);
	};

	Moi() {
	    return this.getToken(HisyeoParser.Moi, 0);
	};

	Menus() {
	    return this.getToken(HisyeoParser.Menus, 0);
	};

	Youti() {
	    return this.getToken(HisyeoParser.Youti, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterRelativeQuantity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitRelativeQuantity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitRelativeQuantity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NominalQuantityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_nominalQuantity;
    }

	Onsu() {
	    return this.getToken(HisyeoParser.Onsu, 0);
	};

	Kinse() {
	    return this.getToken(HisyeoParser.Kinse, 0);
	};

	Kut() {
	    return this.getToken(HisyeoParser.Kut, 0);
	};

	Tou() {
	    return this.getToken(HisyeoParser.Tou, 0);
	};

	Telo() {
	    return this.getToken(HisyeoParser.Telo, 0);
	};

	Tiu() {
	    return this.getToken(HisyeoParser.Tiu, 0);
	};

	Eson() {
	    return this.getToken(HisyeoParser.Eson, 0);
	};

	Tukwos() {
	    return this.getToken(HisyeoParser.Tukwos, 0);
	};

	Elfu() {
	    return this.getToken(HisyeoParser.Elfu, 0);
	};

	Fun() {
	    return this.getToken(HisyeoParser.Fun, 0);
	};

	Niswi() {
	    return this.getToken(HisyeoParser.Niswi, 0);
	};

	Ses() {
	    return this.getToken(HisyeoParser.Ses, 0);
	};

	Xeti() {
	    return this.getToken(HisyeoParser.Xeti, 0);
	};

	Xunyu() {
	    return this.getToken(HisyeoParser.Xunyu, 0);
	};

	Dus() {
	    return this.getToken(HisyeoParser.Dus, 0);
	};

	Dui() {
	    return this.getToken(HisyeoParser.Dui, 0);
	};

	Ziyon() {
	    return this.getToken(HisyeoParser.Ziyon, 0);
	};

	Bole() {
	    return this.getToken(HisyeoParser.Bole, 0);
	};

	Fiyen() {
	    return this.getToken(HisyeoParser.Fiyen, 0);
	};

	Boit() {
	    return this.getToken(HisyeoParser.Boit, 0);
	};

	Nonku() {
	    return this.getToken(HisyeoParser.Nonku, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterNominalQuantity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitNominalQuantity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitNominalQuantity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostpositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_postposition;
    }

	Ko() {
	    return this.getToken(HisyeoParser.Ko, 0);
	};

	Ci() {
	    return this.getToken(HisyeoParser.Ci, 0);
	};

	Ze() {
	    return this.getToken(HisyeoParser.Ze, 0);
	};

	Foxo() {
	    return this.getToken(HisyeoParser.Foxo, 0);
	};

	Lotfen() {
	    return this.getToken(HisyeoParser.Lotfen, 0);
	};

	Loicok() {
	    return this.getToken(HisyeoParser.Loicok, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterPostposition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitPostposition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitPostposition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PronounContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_pronoun;
    }

	Ozuul() {
	    return this.getToken(HisyeoParser.Ozuul, 0);
	};

	Ono() {
	    return this.getToken(HisyeoParser.Ono, 0);
	};

	Ofo() {
	    return this.getToken(HisyeoParser.Ofo, 0);
	};

	Ulyo() {
	    return this.getToken(HisyeoParser.Ulyo, 0);
	};

	Cizi() {
	    return this.getToken(HisyeoParser.Cizi, 0);
	};

	Dizel() {
	    return this.getToken(HisyeoParser.Dizel, 0);
	};

	Zik() {
	    return this.getToken(HisyeoParser.Zik, 0);
	};

	Noyo() {
	    return this.getToken(HisyeoParser.Noyo, 0);
	};

	Ni() {
	    return this.getToken(HisyeoParser.Ni, 0);
	};

	Nio() {
	    return this.getToken(HisyeoParser.Nio, 0);
	};

	Nimu() {
	    return this.getToken(HisyeoParser.Nimu, 0);
	};

	Nus() {
	    return this.getToken(HisyeoParser.Nus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterPronoun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitPronoun(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitPronoun(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RawVerbsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_rawVerbs;
    }

	Outo() {
	    return this.getToken(HisyeoParser.Outo, 0);
	};

	Okot() {
	    return this.getToken(HisyeoParser.Okot, 0);
	};

	Okulo() {
	    return this.getToken(HisyeoParser.Okulo, 0);
	};

	Ogolol() {
	    return this.getToken(HisyeoParser.Ogolol, 0);
	};

	Obulu() {
	    return this.getToken(HisyeoParser.Obulu, 0);
	};

	Onkonu() {
	    return this.getToken(HisyeoParser.Onkonu, 0);
	};

	Onkuol() {
	    return this.getToken(HisyeoParser.Onkuol, 0);
	};

	Oncemon() {
	    return this.getToken(HisyeoParser.Oncemon, 0);
	};

	Ondo() {
	    return this.getToken(HisyeoParser.Ondo, 0);
	};

	Oitun() {
	    return this.getToken(HisyeoParser.Oitun, 0);
	};

	Onton() {
	    return this.getToken(HisyeoParser.Onton, 0);
	};

	Isko() {
	    return this.getToken(HisyeoParser.Isko, 0);
	};

	Imon() {
	    return this.getToken(HisyeoParser.Imon, 0);
	};

	Icwon() {
	    return this.getToken(HisyeoParser.Icwon, 0);
	};

	Uskifo() {
	    return this.getToken(HisyeoParser.Uskifo, 0);
	};

	Unon() {
	    return this.getToken(HisyeoParser.Unon, 0);
	};

	Uslek() {
	    return this.getToken(HisyeoParser.Uslek, 0);
	};

	Unhilun() {
	    return this.getToken(HisyeoParser.Unhilun, 0);
	};

	Hobiyo() {
	    return this.getToken(HisyeoParser.Hobiyo, 0);
	};

	Hofo() {
	    return this.getToken(HisyeoParser.Hofo, 0);
	};

	Hodoku() {
	    return this.getToken(HisyeoParser.Hodoku, 0);
	};

	Hefin() {
	    return this.getToken(HisyeoParser.Hefin, 0);
	};

	Helgo() {
	    return this.getToken(HisyeoParser.Helgo, 0);
	};

	Huke() {
	    return this.getToken(HisyeoParser.Huke, 0);
	};

	Hukun() {
	    return this.getToken(HisyeoParser.Hukun, 0);
	};

	Husku() {
	    return this.getToken(HisyeoParser.Husku, 0);
	};

	Kontol() {
	    return this.getToken(HisyeoParser.Kontol, 0);
	};

	Koto() {
	    return this.getToken(HisyeoParser.Koto, 0);
	};

	Kos() {
	    return this.getToken(HisyeoParser.Kos, 0);
	};

	Koson() {
	    return this.getToken(HisyeoParser.Koson, 0);
	};

	Kontesto() {
	    return this.getToken(HisyeoParser.Kontesto, 0);
	};

	Kondodu() {
	    return this.getToken(HisyeoParser.Kondodu, 0);
	};

	Kelo() {
	    return this.getToken(HisyeoParser.Kelo, 0);
	};

	Kiso() {
	    return this.getToken(HisyeoParser.Kiso, 0);
	};

	Kududo() {
	    return this.getToken(HisyeoParser.Kududo, 0);
	};

	Gomi() {
	    return this.getToken(HisyeoParser.Gomi, 0);
	};

	Goniso() {
	    return this.getToken(HisyeoParser.Goniso, 0);
	};

	Golun() {
	    return this.getToken(HisyeoParser.Golun, 0);
	};

	Golo() {
	    return this.getToken(HisyeoParser.Golo, 0);
	};

	Gocidon() {
	    return this.getToken(HisyeoParser.Gocidon, 0);
	};

	Gufio() {
	    return this.getToken(HisyeoParser.Gufio, 0);
	};

	Guwolo() {
	    return this.getToken(HisyeoParser.Guwolo, 0);
	};

	Toswil() {
	    return this.getToken(HisyeoParser.Toswil, 0);
	};

	Touyen() {
	    return this.getToken(HisyeoParser.Touyen, 0);
	};

	Tenkin() {
	    return this.getToken(HisyeoParser.Tenkin, 0);
	};

	Tuluti() {
	    return this.getToken(HisyeoParser.Tuluti, 0);
	};

	Tuek() {
	    return this.getToken(HisyeoParser.Tuek, 0);
	};

	Tuu() {
	    return this.getToken(HisyeoParser.Tuu, 0);
	};

	Tulokon() {
	    return this.getToken(HisyeoParser.Tulokon, 0);
	};

	Conwebo() {
	    return this.getToken(HisyeoParser.Conwebo, 0);
	};

	Coufon() {
	    return this.getToken(HisyeoParser.Coufon, 0);
	};

	Cixin() {
	    return this.getToken(HisyeoParser.Cixin, 0);
	};

	Cifu() {
	    return this.getToken(HisyeoParser.Cifu, 0);
	};

	Cihun() {
	    return this.getToken(HisyeoParser.Cihun, 0);
	};

	Citse() {
	    return this.getToken(HisyeoParser.Citse, 0);
	};

	Cukto() {
	    return this.getToken(HisyeoParser.Cukto, 0);
	};

	Cinli() {
	    return this.getToken(HisyeoParser.Cinli, 0);
	};

	Cutne() {
	    return this.getToken(HisyeoParser.Cutne, 0);
	};

	Cuncion() {
	    return this.getToken(HisyeoParser.Cuncion, 0);
	};

	Cunliu() {
	    return this.getToken(HisyeoParser.Cunliu, 0);
	};

	Culono() {
	    return this.getToken(HisyeoParser.Culono, 0);
	};

	Cudo() {
	    return this.getToken(HisyeoParser.Cudo, 0);
	};

	Cufo() {
	    return this.getToken(HisyeoParser.Cufo, 0);
	};

	Cungo() {
	    return this.getToken(HisyeoParser.Cungo, 0);
	};

	Culosun() {
	    return this.getToken(HisyeoParser.Culosun, 0);
	};

	Socok() {
	    return this.getToken(HisyeoParser.Socok, 0);
	};

	Sobole() {
	    return this.getToken(HisyeoParser.Sobole, 0);
	};

	Somo() {
	    return this.getToken(HisyeoParser.Somo, 0);
	};

	Sobis() {
	    return this.getToken(HisyeoParser.Sobis, 0);
	};

	Solu() {
	    return this.getToken(HisyeoParser.Solu, 0);
	};

	Seloho() {
	    return this.getToken(HisyeoParser.Seloho, 0);
	};

	Sityo() {
	    return this.getToken(HisyeoParser.Sityo, 0);
	};

	Siufo() {
	    return this.getToken(HisyeoParser.Siufo, 0);
	};

	Suoxic() {
	    return this.getToken(HisyeoParser.Suoxic, 0);
	};

	Suko() {
	    return this.getToken(HisyeoParser.Suko, 0);
	};

	Xokulu() {
	    return this.getToken(HisyeoParser.Xokulu, 0);
	};

	Xobo() {
	    return this.getToken(HisyeoParser.Xobo, 0);
	};

	Xontun() {
	    return this.getToken(HisyeoParser.Xontun, 0);
	};

	Xefizec() {
	    return this.getToken(HisyeoParser.Xefizec, 0);
	};

	Xiufu() {
	    return this.getToken(HisyeoParser.Xiufu, 0);
	};

	Xiwon() {
	    return this.getToken(HisyeoParser.Xiwon, 0);
	};

	Xusten() {
	    return this.getToken(HisyeoParser.Xusten, 0);
	};

	Doho() {
	    return this.getToken(HisyeoParser.Doho, 0);
	};

	Doicel() {
	    return this.getToken(HisyeoParser.Doicel, 0);
	};

	Dokdogo() {
	    return this.getToken(HisyeoParser.Dokdogo, 0);
	};

	Doknu() {
	    return this.getToken(HisyeoParser.Doknu, 0);
	};

	Dodou() {
	    return this.getToken(HisyeoParser.Dodou, 0);
	};

	Dostoc() {
	    return this.getToken(HisyeoParser.Dostoc, 0);
	};

	Deko() {
	    return this.getToken(HisyeoParser.Deko, 0);
	};

	Denemek() {
	    return this.getToken(HisyeoParser.Denemek, 0);
	};

	Di() {
	    return this.getToken(HisyeoParser.Di, 0);
	};

	Diyonde() {
	    return this.getToken(HisyeoParser.Diyonde, 0);
	};

	Duuhon() {
	    return this.getToken(HisyeoParser.Duuhon, 0);
	};

	Dustu() {
	    return this.getToken(HisyeoParser.Dustu, 0);
	};

	Dungo() {
	    return this.getToken(HisyeoParser.Dungo, 0);
	};

	Dubono() {
	    return this.getToken(HisyeoParser.Dubono, 0);
	};

	Zohit() {
	    return this.getToken(HisyeoParser.Zohit, 0);
	};

	Zicou() {
	    return this.getToken(HisyeoParser.Zicou, 0);
	};

	Zuwobu() {
	    return this.getToken(HisyeoParser.Zuwobu, 0);
	};

	Zuto() {
	    return this.getToken(HisyeoParser.Zuto, 0);
	};

	Zuyi() {
	    return this.getToken(HisyeoParser.Zuyi, 0);
	};

	Boifon() {
	    return this.getToken(HisyeoParser.Boifon, 0);
	};

	Bokofoc() {
	    return this.getToken(HisyeoParser.Bokofoc, 0);
	};

	Bosol() {
	    return this.getToken(HisyeoParser.Bosol, 0);
	};

	Boklon() {
	    return this.getToken(HisyeoParser.Boklon, 0);
	};

	Betido() {
	    return this.getToken(HisyeoParser.Betido, 0);
	};

	Besol() {
	    return this.getToken(HisyeoParser.Besol, 0);
	};

	Belexu() {
	    return this.getToken(HisyeoParser.Belexu, 0);
	};

	Besnehot() {
	    return this.getToken(HisyeoParser.Besnehot, 0);
	};

	Beudo() {
	    return this.getToken(HisyeoParser.Beudo, 0);
	};

	Bemon() {
	    return this.getToken(HisyeoParser.Bemon, 0);
	};

	Biek() {
	    return this.getToken(HisyeoParser.Biek, 0);
	};

	Bucono() {
	    return this.getToken(HisyeoParser.Bucono, 0);
	};

	Buswen() {
	    return this.getToken(HisyeoParser.Buswen, 0);
	};

	Fohoso() {
	    return this.getToken(HisyeoParser.Fohoso, 0);
	};

	Folun() {
	    return this.getToken(HisyeoParser.Folun, 0);
	};

	Fisun() {
	    return this.getToken(HisyeoParser.Fisun, 0);
	};

	Fiyuxit() {
	    return this.getToken(HisyeoParser.Fiyuxit, 0);
	};

	Fizi() {
	    return this.getToken(HisyeoParser.Fizi, 0);
	};

	Fui() {
	    return this.getToken(HisyeoParser.Fui, 0);
	};

	Fulkoi() {
	    return this.getToken(HisyeoParser.Fulkoi, 0);
	};

	Futsun() {
	    return this.getToken(HisyeoParser.Futsun, 0);
	};

	Funbo() {
	    return this.getToken(HisyeoParser.Funbo, 0);
	};

	Mokon() {
	    return this.getToken(HisyeoParser.Mokon, 0);
	};

	Motsi() {
	    return this.getToken(HisyeoParser.Motsi, 0);
	};

	Monodo() {
	    return this.getToken(HisyeoParser.Monodo, 0);
	};

	Motsile() {
	    return this.getToken(HisyeoParser.Motsile, 0);
	};

	Moniso() {
	    return this.getToken(HisyeoParser.Moniso, 0);
	};

	Muncoti() {
	    return this.getToken(HisyeoParser.Muncoti, 0);
	};

	Nocido() {
	    return this.getToken(HisyeoParser.Nocido, 0);
	};

	Munyufo() {
	    return this.getToken(HisyeoParser.Munyufo, 0);
	};

	Niltugu() {
	    return this.getToken(HisyeoParser.Niltugu, 0);
	};

	Niwos() {
	    return this.getToken(HisyeoParser.Niwos, 0);
	};

	Wofok() {
	    return this.getToken(HisyeoParser.Wofok, 0);
	};

	Wedo() {
	    return this.getToken(HisyeoParser.Wedo, 0);
	};

	Weilun() {
	    return this.getToken(HisyeoParser.Weilun, 0);
	};

	Wekeso() {
	    return this.getToken(HisyeoParser.Wekeso, 0);
	};

	Wetodu() {
	    return this.getToken(HisyeoParser.Wetodu, 0);
	};

	Wetu() {
	    return this.getToken(HisyeoParser.Wetu, 0);
	};

	Weko() {
	    return this.getToken(HisyeoParser.Weko, 0);
	};

	Weloi() {
	    return this.getToken(HisyeoParser.Weloi, 0);
	};

	Wuitsi() {
	    return this.getToken(HisyeoParser.Wuitsi, 0);
	};

	Lobotol() {
	    return this.getToken(HisyeoParser.Lobotol, 0);
	};

	Lozic() {
	    return this.getToken(HisyeoParser.Lozic, 0);
	};

	Liun() {
	    return this.getToken(HisyeoParser.Liun, 0);
	};

	Liubit() {
	    return this.getToken(HisyeoParser.Liubit, 0);
	};

	Lufono() {
	    return this.getToken(HisyeoParser.Lufono, 0);
	};

	Lunsol() {
	    return this.getToken(HisyeoParser.Lunsol, 0);
	};

	Yosten() {
	    return this.getToken(HisyeoParser.Yosten, 0);
	};

	Yon() {
	    return this.getToken(HisyeoParser.Yon, 0);
	};

	Yundou() {
	    return this.getToken(HisyeoParser.Yundou, 0);
	};

	Yunlon() {
	    return this.getToken(HisyeoParser.Yunlon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterRawVerbs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitRawVerbs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitRawVerbs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RawNounsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_rawNouns;
    }

	Oudi() {
	    return this.getToken(HisyeoParser.Oudi, 0);
	};

	Okoxu() {
	    return this.getToken(HisyeoParser.Okoxu, 0);
	};

	Oksun() {
	    return this.getToken(HisyeoParser.Oksun, 0);
	};

	Oklumun() {
	    return this.getToken(HisyeoParser.Oklumun, 0);
	};

	Ostok() {
	    return this.getToken(HisyeoParser.Ostok, 0);
	};

	Ocuo() {
	    return this.getToken(HisyeoParser.Ocuo, 0);
	};

	Oboki() {
	    return this.getToken(HisyeoParser.Oboki, 0);
	};

	Obo() {
	    return this.getToken(HisyeoParser.Obo, 0);
	};

	Ongolo() {
	    return this.getToken(HisyeoParser.Ongolo, 0);
	};

	Onfibi() {
	    return this.getToken(HisyeoParser.Onfibi, 0);
	};

	Onwoni() {
	    return this.getToken(HisyeoParser.Onwoni, 0);
	};

	Osti() {
	    return this.getToken(HisyeoParser.Osti, 0);
	};

	Ozil() {
	    return this.getToken(HisyeoParser.Ozil, 0);
	};

	Eloi() {
	    return this.getToken(HisyeoParser.Eloi, 0);
	};

	Eleke() {
	    return this.getToken(HisyeoParser.Eleke, 0);
	};

	Otsotot() {
	    return this.getToken(HisyeoParser.Otsotot, 0);
	};

	Etso() {
	    return this.getToken(HisyeoParser.Etso, 0);
	};

	Ebol() {
	    return this.getToken(HisyeoParser.Ebol, 0);
	};

	Enkomon() {
	    return this.getToken(HisyeoParser.Enkomon, 0);
	};

	Ohel() {
	    return this.getToken(HisyeoParser.Ohel, 0);
	};

	Itihos() {
	    return this.getToken(HisyeoParser.Itihos, 0);
	};

	Enbukun() {
	    return this.getToken(HisyeoParser.Enbukun, 0);
	};

	Istihol() {
	    return this.getToken(HisyeoParser.Istihol, 0);
	};

	Isibo() {
	    return this.getToken(HisyeoParser.Isibo, 0);
	};

	Isenso() {
	    return this.getToken(HisyeoParser.Isenso, 0);
	};

	Isbonxu() {
	    return this.getToken(HisyeoParser.Isbonxu, 0);
	};

	Ixolo() {
	    return this.getToken(HisyeoParser.Ixolo, 0);
	};

	Ibuwe() {
	    return this.getToken(HisyeoParser.Ibuwe, 0);
	};

	Ibole() {
	    return this.getToken(HisyeoParser.Ibole, 0);
	};

	Iciwu() {
	    return this.getToken(HisyeoParser.Iciwu, 0);
	};

	Ile() {
	    return this.getToken(HisyeoParser.Ile, 0);
	};

	Inboli() {
	    return this.getToken(HisyeoParser.Inboli, 0);
	};

	Umo() {
	    return this.getToken(HisyeoParser.Umo, 0);
	};

	Undofol() {
	    return this.getToken(HisyeoParser.Undofol, 0);
	};

	Unbu() {
	    return this.getToken(HisyeoParser.Unbu, 0);
	};

	Uyo() {
	    return this.getToken(HisyeoParser.Uyo, 0);
	};

	Ucumi() {
	    return this.getToken(HisyeoParser.Ucumi, 0);
	};

	Usmon() {
	    return this.getToken(HisyeoParser.Usmon, 0);
	};

	Usen() {
	    return this.getToken(HisyeoParser.Usen, 0);
	};

	Unfuno() {
	    return this.getToken(HisyeoParser.Unfuno, 0);
	};

	Ulonfu() {
	    return this.getToken(HisyeoParser.Ulonfu, 0);
	};

	Ulogun() {
	    return this.getToken(HisyeoParser.Ulogun, 0);
	};

	Ulzo() {
	    return this.getToken(HisyeoParser.Ulzo, 0);
	};

	Hokoli() {
	    return this.getToken(HisyeoParser.Hokoli, 0);
	};

	Hoxobe() {
	    return this.getToken(HisyeoParser.Hoxobe, 0);
	};

	Hosoun() {
	    return this.getToken(HisyeoParser.Hosoun, 0);
	};

	Hondon() {
	    return this.getToken(HisyeoParser.Hondon, 0);
	};

	Hoktun() {
	    return this.getToken(HisyeoParser.Hoktun, 0);
	};

	Honyo() {
	    return this.getToken(HisyeoParser.Honyo, 0);
	};

	Hofezi() {
	    return this.getToken(HisyeoParser.Hofezi, 0);
	};

	Holuk() {
	    return this.getToken(HisyeoParser.Holuk, 0);
	};

	Holmo() {
	    return this.getToken(HisyeoParser.Holmo, 0);
	};

	Henelo() {
	    return this.getToken(HisyeoParser.Henelo, 0);
	};

	Hitsu() {
	    return this.getToken(HisyeoParser.Hitsu, 0);
	};

	Hismo() {
	    return this.getToken(HisyeoParser.Hismo, 0);
	};

	Honcou() {
	    return this.getToken(HisyeoParser.Honcou, 0);
	};

	Hiskunco() {
	    return this.getToken(HisyeoParser.Hiskunco, 0);
	};

	Hunzidu() {
	    return this.getToken(HisyeoParser.Hunzidu, 0);
	};

	Hustun() {
	    return this.getToken(HisyeoParser.Hustun, 0);
	};

	Hunsuon() {
	    return this.getToken(HisyeoParser.Hunsuon, 0);
	};

	Hulodek() {
	    return this.getToken(HisyeoParser.Hulodek, 0);
	};

	Huwu() {
	    return this.getToken(HisyeoParser.Huwu, 0);
	};

	Hulu() {
	    return this.getToken(HisyeoParser.Hulu, 0);
	};

	Huwuncul() {
	    return this.getToken(HisyeoParser.Huwuncul, 0);
	};

	Kolowu() {
	    return this.getToken(HisyeoParser.Kolowu, 0);
	};

	Kokoku() {
	    return this.getToken(HisyeoParser.Kokoku, 0);
	};

	Kotfusu() {
	    return this.getToken(HisyeoParser.Kotfusu, 0);
	};

	Huzon() {
	    return this.getToken(HisyeoParser.Huzon, 0);
	};

	Kosmo() {
	    return this.getToken(HisyeoParser.Kosmo, 0);
	};

	Komu() {
	    return this.getToken(HisyeoParser.Komu, 0);
	};

	Kolmudul() {
	    return this.getToken(HisyeoParser.Kolmudul, 0);
	};

	Kistose() {
	    return this.getToken(HisyeoParser.Kistose, 0);
	};

	Kiungo() {
	    return this.getToken(HisyeoParser.Kiungo, 0);
	};

	Kisko() {
	    return this.getToken(HisyeoParser.Kisko, 0);
	};

	Kelos() {
	    return this.getToken(HisyeoParser.Kelos, 0);
	};

	Kino() {
	    return this.getToken(HisyeoParser.Kino, 0);
	};

	Kinyosel() {
	    return this.getToken(HisyeoParser.Kinyosel, 0);
	};

	Kukwon() {
	    return this.getToken(HisyeoParser.Kukwon, 0);
	};

	Kuunme() {
	    return this.getToken(HisyeoParser.Kuunme, 0);
	};

	Kuon() {
	    return this.getToken(HisyeoParser.Kuon, 0);
	};

	Kuocyo() {
	    return this.getToken(HisyeoParser.Kuocyo, 0);
	};

	Kuoxi() {
	    return this.getToken(HisyeoParser.Kuoxi, 0);
	};

	Kukmut() {
	    return this.getToken(HisyeoParser.Kukmut, 0);
	};

	Kusowi() {
	    return this.getToken(HisyeoParser.Kusowi, 0);
	};

	Kudu() {
	    return this.getToken(HisyeoParser.Kudu, 0);
	};

	Kunonti() {
	    return this.getToken(HisyeoParser.Kunonti, 0);
	};

	Kumun() {
	    return this.getToken(HisyeoParser.Kumun, 0);
	};

	Kunhiun() {
	    return this.getToken(HisyeoParser.Kunhiun, 0);
	};

	Kuncien() {
	    return this.getToken(HisyeoParser.Kuncien, 0);
	};

	Kunbi() {
	    return this.getToken(HisyeoParser.Kunbi, 0);
	};

	Kuldu() {
	    return this.getToken(HisyeoParser.Kuldu, 0);
	};

	Gos() {
	    return this.getToken(HisyeoParser.Gos, 0);
	};

	Kulunun() {
	    return this.getToken(HisyeoParser.Kulunun, 0);
	};

	Gongoxi() {
	    return this.getToken(HisyeoParser.Gongoxi, 0);
	};

	Gonbu() {
	    return this.getToken(HisyeoParser.Gonbu, 0);
	};

	Kungiyo() {
	    return this.getToken(HisyeoParser.Kungiyo, 0);
	};

	Goyu() {
	    return this.getToken(HisyeoParser.Goyu, 0);
	};

	Geko() {
	    return this.getToken(HisyeoParser.Geko, 0);
	};

	Gito() {
	    return this.getToken(HisyeoParser.Gito, 0);
	};

	Gisgul() {
	    return this.getToken(HisyeoParser.Gisgul, 0);
	};

	Gubuyo() {
	    return this.getToken(HisyeoParser.Gubuyo, 0);
	};

	Guexo() {
	    return this.getToken(HisyeoParser.Guexo, 0);
	};

	Gundole() {
	    return this.getToken(HisyeoParser.Gundole, 0);
	};

	Gufoxe() {
	    return this.getToken(HisyeoParser.Gufoxe, 0);
	};

	Gudolo() {
	    return this.getToken(HisyeoParser.Gudolo, 0);
	};

	Gueyu() {
	    return this.getToken(HisyeoParser.Gueyu, 0);
	};

	Gumi() {
	    return this.getToken(HisyeoParser.Gumi, 0);
	};

	Gulu() {
	    return this.getToken(HisyeoParser.Gulu, 0);
	};

	Tohilok() {
	    return this.getToken(HisyeoParser.Tohilok, 0);
	};

	Towe() {
	    return this.getToken(HisyeoParser.Towe, 0);
	};

	Tonbokcut() {
	    return this.getToken(HisyeoParser.Tonbokcut, 0);
	};

	Toliyo() {
	    return this.getToken(HisyeoParser.Toliyo, 0);
	};

	Tolen() {
	    return this.getToken(HisyeoParser.Tolen, 0);
	};

	Toliko() {
	    return this.getToken(HisyeoParser.Toliko, 0);
	};

	Tolxeto() {
	    return this.getToken(HisyeoParser.Tolxeto, 0);
	};

	Tomos() {
	    return this.getToken(HisyeoParser.Tomos, 0);
	};

	Toxutsi() {
	    return this.getToken(HisyeoParser.Toxutsi, 0);
	};

	Tetek() {
	    return this.getToken(HisyeoParser.Tetek, 0);
	};

	Titon() {
	    return this.getToken(HisyeoParser.Titon, 0);
	};

	Tixo() {
	    return this.getToken(HisyeoParser.Tixo, 0);
	};

	Timiok() {
	    return this.getToken(HisyeoParser.Timiok, 0);
	};

	Tubo() {
	    return this.getToken(HisyeoParser.Tubo, 0);
	};

	Tundu() {
	    return this.getToken(HisyeoParser.Tundu, 0);
	};

	Tulono() {
	    return this.getToken(HisyeoParser.Tulono, 0);
	};

	Cokwoli() {
	    return this.getToken(HisyeoParser.Cokwoli, 0);
	};

	Comen() {
	    return this.getToken(HisyeoParser.Comen, 0);
	};

	Conoi() {
	    return this.getToken(HisyeoParser.Conoi, 0);
	};

	Cocko() {
	    return this.getToken(HisyeoParser.Cocko, 0);
	};

	Ceo() {
	    return this.getToken(HisyeoParser.Ceo, 0);
	};

	Cen() {
	    return this.getToken(HisyeoParser.Cen, 0);
	};

	Cino() {
	    return this.getToken(HisyeoParser.Cino, 0);
	};

	Cingi() {
	    return this.getToken(HisyeoParser.Cingi, 0);
	};

	Ciwindi() {
	    return this.getToken(HisyeoParser.Ciwindi, 0);
	};

	Cikinil() {
	    return this.getToken(HisyeoParser.Cikinil, 0);
	};

	Cigilsu() {
	    return this.getToken(HisyeoParser.Cigilsu, 0);
	};

	Cibon() {
	    return this.getToken(HisyeoParser.Cibon, 0);
	};

	Cuskido() {
	    return this.getToken(HisyeoParser.Cuskido, 0);
	};

	Cuonwun() {
	    return this.getToken(HisyeoParser.Cuonwun, 0);
	};

	Cui() {
	    return this.getToken(HisyeoParser.Cui, 0);
	};

	Cundol() {
	    return this.getToken(HisyeoParser.Cundol, 0);
	};

	Culci() {
	    return this.getToken(HisyeoParser.Culci, 0);
	};

	Culul() {
	    return this.getToken(HisyeoParser.Culul, 0);
	};

	Sotnin() {
	    return this.getToken(HisyeoParser.Sotnin, 0);
	};

	Sokofu() {
	    return this.getToken(HisyeoParser.Sokofu, 0);
	};

	Soden() {
	    return this.getToken(HisyeoParser.Soden, 0);
	};

	Solilo() {
	    return this.getToken(HisyeoParser.Solilo, 0);
	};

	Sohouk() {
	    return this.getToken(HisyeoParser.Sohouk, 0);
	};

	Solwoc() {
	    return this.getToken(HisyeoParser.Solwoc, 0);
	};

	Sotun() {
	    return this.getToken(HisyeoParser.Sotun, 0);
	};

	Sobo() {
	    return this.getToken(HisyeoParser.Sobo, 0);
	};

	Senwic() {
	    return this.getToken(HisyeoParser.Senwic, 0);
	};

	Seki() {
	    return this.getToken(HisyeoParser.Seki, 0);
	};

	Sekiton() {
	    return this.getToken(HisyeoParser.Sekiton, 0);
	};

	Sedu() {
	    return this.getToken(HisyeoParser.Sedu, 0);
	};

	Sel() {
	    return this.getToken(HisyeoParser.Sel, 0);
	};

	Semoi() {
	    return this.getToken(HisyeoParser.Semoi, 0);
	};

	Siskin() {
	    return this.getToken(HisyeoParser.Siskin, 0);
	};

	Sinsi() {
	    return this.getToken(HisyeoParser.Sinsi, 0);
	};

	Sieto() {
	    return this.getToken(HisyeoParser.Sieto, 0);
	};

	Sikin() {
	    return this.getToken(HisyeoParser.Sikin, 0);
	};

	Sikot() {
	    return this.getToken(HisyeoParser.Sikot, 0);
	};

	Sintokmo() {
	    return this.getToken(HisyeoParser.Sintokmo, 0);
	};

	Suhot() {
	    return this.getToken(HisyeoParser.Suhot, 0);
	};

	Sukyunik() {
	    return this.getToken(HisyeoParser.Sukyunik, 0);
	};

	Sufoun() {
	    return this.getToken(HisyeoParser.Sufoun, 0);
	};

	Sundibot() {
	    return this.getToken(HisyeoParser.Sundibot, 0);
	};

	Sutuo() {
	    return this.getToken(HisyeoParser.Sutuo, 0);
	};

	Suson() {
	    return this.getToken(HisyeoParser.Suson, 0);
	};

	Xohofec() {
	    return this.getToken(HisyeoParser.Xohofec, 0);
	};

	Sunbidu() {
	    return this.getToken(HisyeoParser.Sunbidu, 0);
	};

	Xofo() {
	    return this.getToken(HisyeoParser.Xofo, 0);
	};

	Xolu() {
	    return this.getToken(HisyeoParser.Xolu, 0);
	};

	Xomutlo() {
	    return this.getToken(HisyeoParser.Xomutlo, 0);
	};

	Xifon() {
	    return this.getToken(HisyeoParser.Xifon, 0);
	};

	Xemetsen() {
	    return this.getToken(HisyeoParser.Xemetsen, 0);
	};

	Xingo() {
	    return this.getToken(HisyeoParser.Xingo, 0);
	};

	Xiulo() {
	    return this.getToken(HisyeoParser.Xiulo, 0);
	};

	Xixulko() {
	    return this.getToken(HisyeoParser.Xixulko, 0);
	};

	Ximu() {
	    return this.getToken(HisyeoParser.Ximu, 0);
	};

	Ximol() {
	    return this.getToken(HisyeoParser.Ximol, 0);
	};

	Xincuon() {
	    return this.getToken(HisyeoParser.Xincuon, 0);
	};

	Xuto() {
	    return this.getToken(HisyeoParser.Xuto, 0);
	};

	Xuk() {
	    return this.getToken(HisyeoParser.Xuk, 0);
	};

	Xuxok() {
	    return this.getToken(HisyeoParser.Xuxok, 0);
	};

	Doi() {
	    return this.getToken(HisyeoParser.Doi, 0);
	};

	Doinbi() {
	    return this.getToken(HisyeoParser.Doinbi, 0);
	};

	Docui() {
	    return this.getToken(HisyeoParser.Docui, 0);
	};

	Donuxin() {
	    return this.getToken(HisyeoParser.Donuxin, 0);
	};

	Donus() {
	    return this.getToken(HisyeoParser.Donus, 0);
	};

	Deku() {
	    return this.getToken(HisyeoParser.Deku, 0);
	};

	Detoi() {
	    return this.getToken(HisyeoParser.Detoi, 0);
	};

	Dibo() {
	    return this.getToken(HisyeoParser.Dibo, 0);
	};

	Dinci() {
	    return this.getToken(HisyeoParser.Dinci, 0);
	};

	Dinzou() {
	    return this.getToken(HisyeoParser.Dinzou, 0);
	};

	Dumoko() {
	    return this.getToken(HisyeoParser.Dumoko, 0);
	};

	Duuncit() {
	    return this.getToken(HisyeoParser.Duuncit, 0);
	};

	Duwoni() {
	    return this.getToken(HisyeoParser.Duwoni, 0);
	};

	Zoso() {
	    return this.getToken(HisyeoParser.Zoso, 0);
	};

	Zoston() {
	    return this.getToken(HisyeoParser.Zoston, 0);
	};

	Zomo() {
	    return this.getToken(HisyeoParser.Zomo, 0);
	};

	Zomi() {
	    return this.getToken(HisyeoParser.Zomi, 0);
	};

	Zonwul() {
	    return this.getToken(HisyeoParser.Zonwul, 0);
	};

	Zowo() {
	    return this.getToken(HisyeoParser.Zowo, 0);
	};

	Zoloni() {
	    return this.getToken(HisyeoParser.Zoloni, 0);
	};

	Zoli() {
	    return this.getToken(HisyeoParser.Zoli, 0);
	};

	Zohun() {
	    return this.getToken(HisyeoParser.Zohun, 0);
	};

	Zogoc() {
	    return this.getToken(HisyeoParser.Zogoc, 0);
	};

	Zesto() {
	    return this.getToken(HisyeoParser.Zesto, 0);
	};

	Zizime() {
	    return this.getToken(HisyeoParser.Zizime, 0);
	};

	Zinkon() {
	    return this.getToken(HisyeoParser.Zinkon, 0);
	};

	Zixitu() {
	    return this.getToken(HisyeoParser.Zixitu, 0);
	};

	Ziziyo() {
	    return this.getToken(HisyeoParser.Ziziyo, 0);
	};

	Zuko() {
	    return this.getToken(HisyeoParser.Zuko, 0);
	};

	Zusbot() {
	    return this.getToken(HisyeoParser.Zusbot, 0);
	};

	Zuhu() {
	    return this.getToken(HisyeoParser.Zuhu, 0);
	};

	Zungo() {
	    return this.getToken(HisyeoParser.Zungo, 0);
	};

	Zuntulu() {
	    return this.getToken(HisyeoParser.Zuntulu, 0);
	};

	Zunlo() {
	    return this.getToken(HisyeoParser.Zunlo, 0);
	};

	Boholon() {
	    return this.getToken(HisyeoParser.Boholon, 0);
	};

	Bogo() {
	    return this.getToken(HisyeoParser.Bogo, 0);
	};

	Bostofis() {
	    return this.getToken(HisyeoParser.Bostofis, 0);
	};

	Boxo() {
	    return this.getToken(HisyeoParser.Boxo, 0);
	};

	Boboun() {
	    return this.getToken(HisyeoParser.Boboun, 0);
	};

	Bolce() {
	    return this.getToken(HisyeoParser.Bolce, 0);
	};

	Bokbun() {
	    return this.getToken(HisyeoParser.Bokbun, 0);
	};

	Bolfele() {
	    return this.getToken(HisyeoParser.Bolfele, 0);
	};

	Bonti() {
	    return this.getToken(HisyeoParser.Bonti, 0);
	};

	Beiku() {
	    return this.getToken(HisyeoParser.Beiku, 0);
	};

	Belete() {
	    return this.getToken(HisyeoParser.Belete, 0);
	};

	Bitun() {
	    return this.getToken(HisyeoParser.Bitun, 0);
	};

	Binleo() {
	    return this.getToken(HisyeoParser.Binleo, 0);
	};

	Biomu() {
	    return this.getToken(HisyeoParser.Biomu, 0);
	};

	Bindu() {
	    return this.getToken(HisyeoParser.Bindu, 0);
	};

	Binton() {
	    return this.getToken(HisyeoParser.Binton, 0);
	};

	Buswelin() {
	    return this.getToken(HisyeoParser.Buswelin, 0);
	};

	Buyencok() {
	    return this.getToken(HisyeoParser.Buyencok, 0);
	};

	Budogo() {
	    return this.getToken(HisyeoParser.Budogo, 0);
	};

	Bumi() {
	    return this.getToken(HisyeoParser.Bumi, 0);
	};

	Buntut() {
	    return this.getToken(HisyeoParser.Buntut, 0);
	};

	Bunduki() {
	    return this.getToken(HisyeoParser.Bunduki, 0);
	};

	Bulusi() {
	    return this.getToken(HisyeoParser.Bulusi, 0);
	};

	Fout() {
	    return this.getToken(HisyeoParser.Fout, 0);
	};

	Fonxin() {
	    return this.getToken(HisyeoParser.Fonxin, 0);
	};

	Fonolon() {
	    return this.getToken(HisyeoParser.Fonolon, 0);
	};

	Folo() {
	    return this.getToken(HisyeoParser.Folo, 0);
	};

	Fohon() {
	    return this.getToken(HisyeoParser.Fohon, 0);
	};

	Fodoloc() {
	    return this.getToken(HisyeoParser.Fodoloc, 0);
	};

	Fecko() {
	    return this.getToken(HisyeoParser.Fecko, 0);
	};

	Fenuo() {
	    return this.getToken(HisyeoParser.Fenuo, 0);
	};

	Fikwun() {
	    return this.getToken(HisyeoParser.Fikwun, 0);
	};

	Filo() {
	    return this.getToken(HisyeoParser.Filo, 0);
	};

	Fun() {
	    return this.getToken(HisyeoParser.Fun, 0);
	};

	Fuus() {
	    return this.getToken(HisyeoParser.Fuus, 0);
	};

	Fukuxi() {
	    return this.getToken(HisyeoParser.Fukuxi, 0);
	};

	Fuongok() {
	    return this.getToken(HisyeoParser.Fuongok, 0);
	};

	Fuxubin() {
	    return this.getToken(HisyeoParser.Fuxubin, 0);
	};

	Motuo() {
	    return this.getToken(HisyeoParser.Motuo, 0);
	};

	Mocko() {
	    return this.getToken(HisyeoParser.Mocko, 0);
	};

	Funlok() {
	    return this.getToken(HisyeoParser.Funlok, 0);
	};

	Mozulis() {
	    return this.getToken(HisyeoParser.Mozulis, 0);
	};

	Mozun() {
	    return this.getToken(HisyeoParser.Mozun, 0);
	};

	Mongo() {
	    return this.getToken(HisyeoParser.Mongo, 0);
	};

	Mokofo() {
	    return this.getToken(HisyeoParser.Mokofo, 0);
	};

	Motowo() {
	    return this.getToken(HisyeoParser.Motowo, 0);
	};

	Moto() {
	    return this.getToken(HisyeoParser.Moto, 0);
	};

	Motifo() {
	    return this.getToken(HisyeoParser.Motifo, 0);
	};

	Menyuu() {
	    return this.getToken(HisyeoParser.Menyuu, 0);
	};

	Meloc() {
	    return this.getToken(HisyeoParser.Meloc, 0);
	};

	Minyo() {
	    return this.getToken(HisyeoParser.Minyo, 0);
	};

	Miebil() {
	    return this.getToken(HisyeoParser.Miebil, 0);
	};

	Miencok() {
	    return this.getToken(HisyeoParser.Miencok, 0);
	};

	Mikdol() {
	    return this.getToken(HisyeoParser.Mikdol, 0);
	};

	Mitmo() {
	    return this.getToken(HisyeoParser.Mitmo, 0);
	};

	Micin() {
	    return this.getToken(HisyeoParser.Micin, 0);
	};

	Mutyu() {
	    return this.getToken(HisyeoParser.Mutyu, 0);
	};

	Minyoto() {
	    return this.getToken(HisyeoParser.Minyoto, 0);
	};

	Muni() {
	    return this.getToken(HisyeoParser.Muni, 0);
	};

	Muesi() {
	    return this.getToken(HisyeoParser.Muesi, 0);
	};

	Mukonun() {
	    return this.getToken(HisyeoParser.Mukonun, 0);
	};

	Muhoyon() {
	    return this.getToken(HisyeoParser.Muhoyon, 0);
	};

	Noo() {
	    return this.getToken(HisyeoParser.Noo, 0);
	};

	Nouku() {
	    return this.getToken(HisyeoParser.Nouku, 0);
	};

	Noso() {
	    return this.getToken(HisyeoParser.Noso, 0);
	};

	Nodu() {
	    return this.getToken(HisyeoParser.Nodu, 0);
	};

	Nozi() {
	    return this.getToken(HisyeoParser.Nozi, 0);
	};

	Nomu() {
	    return this.getToken(HisyeoParser.Nomu, 0);
	};

	Non() {
	    return this.getToken(HisyeoParser.Non, 0);
	};

	Nonto() {
	    return this.getToken(HisyeoParser.Nonto, 0);
	};

	Noilu() {
	    return this.getToken(HisyeoParser.Noilu, 0);
	};

	Muxi() {
	    return this.getToken(HisyeoParser.Muxi, 0);
	};

	Neigin() {
	    return this.getToken(HisyeoParser.Neigin, 0);
	};

	Nec() {
	    return this.getToken(HisyeoParser.Nec, 0);
	};

	Nokso() {
	    return this.getToken(HisyeoParser.Nokso, 0);
	};

	Nicu() {
	    return this.getToken(HisyeoParser.Nicu, 0);
	};

	Nixin() {
	    return this.getToken(HisyeoParser.Nixin, 0);
	};

	Nilol() {
	    return this.getToken(HisyeoParser.Nilol, 0);
	};

	Nukulo() {
	    return this.getToken(HisyeoParser.Nukulo, 0);
	};

	Nucoto() {
	    return this.getToken(HisyeoParser.Nucoto, 0);
	};

	Numuno() {
	    return this.getToken(HisyeoParser.Numuno, 0);
	};

	Nuluhu() {
	    return this.getToken(HisyeoParser.Nuluhu, 0);
	};

	Wokto() {
	    return this.getToken(HisyeoParser.Wokto, 0);
	};

	Wobi() {
	    return this.getToken(HisyeoParser.Wobi, 0);
	};

	Wokut() {
	    return this.getToken(HisyeoParser.Wokut, 0);
	};

	Nuyo() {
	    return this.getToken(HisyeoParser.Nuyo, 0);
	};

	Woloko() {
	    return this.getToken(HisyeoParser.Woloko, 0);
	};

	Wowoe() {
	    return this.getToken(HisyeoParser.Wowoe, 0);
	};

	Woyu() {
	    return this.getToken(HisyeoParser.Woyu, 0);
	};

	Wolik() {
	    return this.getToken(HisyeoParser.Wolik, 0);
	};

	Wexon() {
	    return this.getToken(HisyeoParser.Wexon, 0);
	};

	Wikse() {
	    return this.getToken(HisyeoParser.Wikse, 0);
	};

	Wixonu() {
	    return this.getToken(HisyeoParser.Wixonu, 0);
	};

	Wik() {
	    return this.getToken(HisyeoParser.Wik, 0);
	};

	Wiluwo() {
	    return this.getToken(HisyeoParser.Wiluwo, 0);
	};

	Wuto() {
	    return this.getToken(HisyeoParser.Wuto, 0);
	};

	Wibolo() {
	    return this.getToken(HisyeoParser.Wibolo, 0);
	};

	Wulus() {
	    return this.getToken(HisyeoParser.Wulus, 0);
	};

	Wutun() {
	    return this.getToken(HisyeoParser.Wutun, 0);
	};

	Wuot() {
	    return this.getToken(HisyeoParser.Wuot, 0);
	};

	Lozido() {
	    return this.getToken(HisyeoParser.Lozido, 0);
	};

	Lozo() {
	    return this.getToken(HisyeoParser.Lozo, 0);
	};

	Lono() {
	    return this.getToken(HisyeoParser.Lono, 0);
	};

	Longi() {
	    return this.getToken(HisyeoParser.Longi, 0);
	};

	Lolu() {
	    return this.getToken(HisyeoParser.Lolu, 0);
	};

	Leknek() {
	    return this.getToken(HisyeoParser.Leknek, 0);
	};

	Lonkin() {
	    return this.getToken(HisyeoParser.Lonkin, 0);
	};

	Lexetko() {
	    return this.getToken(HisyeoParser.Lexetko, 0);
	};

	Lismu() {
	    return this.getToken(HisyeoParser.Lismu, 0);
	};

	Listo() {
	    return this.getToken(HisyeoParser.Listo, 0);
	};

	Limien() {
	    return this.getToken(HisyeoParser.Limien, 0);
	};

	Libu() {
	    return this.getToken(HisyeoParser.Libu, 0);
	};

	Luhu() {
	    return this.getToken(HisyeoParser.Luhu, 0);
	};

	Luok() {
	    return this.getToken(HisyeoParser.Luok, 0);
	};

	Luicu() {
	    return this.getToken(HisyeoParser.Luicu, 0);
	};

	Lucku() {
	    return this.getToken(HisyeoParser.Lucku, 0);
	};

	Yokuntik() {
	    return this.getToken(HisyeoParser.Yokuntik, 0);
	};

	Yogo() {
	    return this.getToken(HisyeoParser.Yogo, 0);
	};

	Yoskinyo() {
	    return this.getToken(HisyeoParser.Yoskinyo, 0);
	};

	Yoldun() {
	    return this.getToken(HisyeoParser.Yoldun, 0);
	};

	Youxin() {
	    return this.getToken(HisyeoParser.Youxin, 0);
	};

	Yocno() {
	    return this.getToken(HisyeoParser.Yocno, 0);
	};

	Yone() {
	    return this.getToken(HisyeoParser.Yone, 0);
	};

	Yinyunci() {
	    return this.getToken(HisyeoParser.Yinyunci, 0);
	};

	Yofuk() {
	    return this.getToken(HisyeoParser.Yofuk, 0);
	};

	Yukwoi() {
	    return this.getToken(HisyeoParser.Yukwoi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterRawNouns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitRawNouns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitRawNouns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RawModifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_rawModifiers;
    }

	Oksios() {
	    return this.getToken(HisyeoParser.Oksios, 0);
	};

	Ogoge() {
	    return this.getToken(HisyeoParser.Ogoge, 0);
	};

	Osyen() {
	    return this.getToken(HisyeoParser.Osyen, 0);
	};

	Otos() {
	    return this.getToken(HisyeoParser.Otos, 0);
	};

	Obunyun() {
	    return this.getToken(HisyeoParser.Obunyun, 0);
	};

	Ofine() {
	    return this.getToken(HisyeoParser.Ofine, 0);
	};

	Omulto() {
	    return this.getToken(HisyeoParser.Omulto, 0);
	};

	Oltu() {
	    return this.getToken(HisyeoParser.Oltu, 0);
	};

	Osole() {
	    return this.getToken(HisyeoParser.Osole, 0);
	};

	Odon() {
	    return this.getToken(HisyeoParser.Odon, 0);
	};

	Obok() {
	    return this.getToken(HisyeoParser.Obok, 0);
	};

	Elentet() {
	    return this.getToken(HisyeoParser.Elentet, 0);
	};

	Efun() {
	    return this.getToken(HisyeoParser.Efun, 0);
	};

	Eme() {
	    return this.getToken(HisyeoParser.Eme, 0);
	};

	Eleo() {
	    return this.getToken(HisyeoParser.Eleo, 0);
	};

	Isbulyol() {
	    return this.getToken(HisyeoParser.Isbulyol, 0);
	};

	Infultin() {
	    return this.getToken(HisyeoParser.Infultin, 0);
	};

	Ibudu() {
	    return this.getToken(HisyeoParser.Ibudu, 0);
	};

	Iwote() {
	    return this.getToken(HisyeoParser.Iwote, 0);
	};

	Usundul() {
	    return this.getToken(HisyeoParser.Usundul, 0);
	};

	Ilxizuk() {
	    return this.getToken(HisyeoParser.Ilxizuk, 0);
	};

	Uklo() {
	    return this.getToken(HisyeoParser.Uklo, 0);
	};

	Ubenus() {
	    return this.getToken(HisyeoParser.Ubenus, 0);
	};

	Ubolni() {
	    return this.getToken(HisyeoParser.Ubolni, 0);
	};

	Ufulit() {
	    return this.getToken(HisyeoParser.Ufulit, 0);
	};

	Unbol() {
	    return this.getToken(HisyeoParser.Unbol, 0);
	};

	Utok() {
	    return this.getToken(HisyeoParser.Utok, 0);
	};

	Usowo() {
	    return this.getToken(HisyeoParser.Usowo, 0);
	};

	Umomi() {
	    return this.getToken(HisyeoParser.Umomi, 0);
	};

	Uncoi() {
	    return this.getToken(HisyeoParser.Uncoi, 0);
	};

	Unidu() {
	    return this.getToken(HisyeoParser.Unidu, 0);
	};

	Ulkefi() {
	    return this.getToken(HisyeoParser.Ulkefi, 0);
	};

	Hoos() {
	    return this.getToken(HisyeoParser.Hoos, 0);
	};

	Ulgukin() {
	    return this.getToken(HisyeoParser.Ulgukin, 0);
	};

	Hokuxi() {
	    return this.getToken(HisyeoParser.Hokuxi, 0);
	};

	Hokiki() {
	    return this.getToken(HisyeoParser.Hokiki, 0);
	};

	Hosin() {
	    return this.getToken(HisyeoParser.Hosin, 0);
	};

	Homus() {
	    return this.getToken(HisyeoParser.Homus, 0);
	};

	Hondot() {
	    return this.getToken(HisyeoParser.Hondot, 0);
	};

	Henonde() {
	    return this.getToken(HisyeoParser.Henonde, 0);
	};

	Hiklihos() {
	    return this.getToken(HisyeoParser.Hiklihos, 0);
	};

	Helxun() {
	    return this.getToken(HisyeoParser.Helxun, 0);
	};

	Hitnodet() {
	    return this.getToken(HisyeoParser.Hitnodet, 0);
	};

	Hiyoli() {
	    return this.getToken(HisyeoParser.Hiyoli, 0);
	};

	Hizon() {
	    return this.getToken(HisyeoParser.Hizon, 0);
	};

	Huunhu() {
	    return this.getToken(HisyeoParser.Huunhu, 0);
	};

	Huluko() {
	    return this.getToken(HisyeoParser.Huluko, 0);
	};

	Hunsik() {
	    return this.getToken(HisyeoParser.Hunsik, 0);
	};

	Hudul() {
	    return this.getToken(HisyeoParser.Hudul, 0);
	};

	Kotonhon() {
	    return this.getToken(HisyeoParser.Kotonhon, 0);
	};

	Kocko() {
	    return this.getToken(HisyeoParser.Kocko, 0);
	};

	Kotilmok() {
	    return this.getToken(HisyeoParser.Kotilmok, 0);
	};

	Kobut() {
	    return this.getToken(HisyeoParser.Kobut, 0);
	};

	Konxo() {
	    return this.getToken(HisyeoParser.Konxo, 0);
	};

	Konwo() {
	    return this.getToken(HisyeoParser.Konwo, 0);
	};

	Konbokbo() {
	    return this.getToken(HisyeoParser.Konbokbo, 0);
	};

	Kotikol() {
	    return this.getToken(HisyeoParser.Kotikol, 0);
	};

	Koxente() {
	    return this.getToken(HisyeoParser.Koxente, 0);
	};

	Kodus() {
	    return this.getToken(HisyeoParser.Kodus, 0);
	};

	Konen() {
	    return this.getToken(HisyeoParser.Konen, 0);
	};

	Kondonse() {
	    return this.getToken(HisyeoParser.Kondonse, 0);
	};

	Konyec() {
	    return this.getToken(HisyeoParser.Konyec, 0);
	};

	Keskin() {
	    return this.getToken(HisyeoParser.Keskin, 0);
	};

	Kexik() {
	    return this.getToken(HisyeoParser.Kexik, 0);
	};

	Kiluku() {
	    return this.getToken(HisyeoParser.Kiluku, 0);
	};

	Konbo() {
	    return this.getToken(HisyeoParser.Konbo, 0);
	};

	Kioso() {
	    return this.getToken(HisyeoParser.Kioso, 0);
	};

	Kikolo() {
	    return this.getToken(HisyeoParser.Kikolo, 0);
	};

	Kinoxi() {
	    return this.getToken(HisyeoParser.Kinoxi, 0);
	};

	Kildo() {
	    return this.getToken(HisyeoParser.Kildo, 0);
	};

	Kiyo() {
	    return this.getToken(HisyeoParser.Kiyo, 0);
	};

	Kutin() {
	    return this.getToken(HisyeoParser.Kutin, 0);
	};

	Kinlik() {
	    return this.getToken(HisyeoParser.Kinlik, 0);
	};

	Kuonlon() {
	    return this.getToken(HisyeoParser.Kuonlon, 0);
	};

	Kuzou() {
	    return this.getToken(HisyeoParser.Kuzou, 0);
	};

	Gosil() {
	    return this.getToken(HisyeoParser.Gosil, 0);
	};

	Kuyo() {
	    return this.getToken(HisyeoParser.Kuyo, 0);
	};

	Gonzil() {
	    return this.getToken(HisyeoParser.Gonzil, 0);
	};

	Golbinus() {
	    return this.getToken(HisyeoParser.Golbinus, 0);
	};

	Golfon() {
	    return this.getToken(HisyeoParser.Golfon, 0);
	};

	Go() {
	    return this.getToken(HisyeoParser.Go, 0);
	};

	Gonyumon() {
	    return this.getToken(HisyeoParser.Gonyumon, 0);
	};

	Goluo() {
	    return this.getToken(HisyeoParser.Goluo, 0);
	};

	Gowo() {
	    return this.getToken(HisyeoParser.Gowo, 0);
	};

	Gemolen() {
	    return this.getToken(HisyeoParser.Gemolen, 0);
	};

	Gelmis() {
	    return this.getToken(HisyeoParser.Gelmis, 0);
	};

	Gik() {
	    return this.getToken(HisyeoParser.Gik, 0);
	};

	Gion() {
	    return this.getToken(HisyeoParser.Gion, 0);
	};

	Gufis() {
	    return this.getToken(HisyeoParser.Gufis, 0);
	};

	Guso() {
	    return this.getToken(HisyeoParser.Guso, 0);
	};

	Gunokol() {
	    return this.getToken(HisyeoParser.Gunokol, 0);
	};

	Gulobi() {
	    return this.getToken(HisyeoParser.Gulobi, 0);
	};

	Totsi() {
	    return this.getToken(HisyeoParser.Totsi, 0);
	};

	Tocit() {
	    return this.getToken(HisyeoParser.Tocit, 0);
	};

	Toncoi() {
	    return this.getToken(HisyeoParser.Toncoi, 0);
	};

	Tonko() {
	    return this.getToken(HisyeoParser.Tonko, 0);
	};

	Tolki() {
	    return this.getToken(HisyeoParser.Tolki, 0);
	};

	Tigoyo() {
	    return this.getToken(HisyeoParser.Tigoyo, 0);
	};

	Tifulci() {
	    return this.getToken(HisyeoParser.Tifulci, 0);
	};

	Tiku() {
	    return this.getToken(HisyeoParser.Tiku, 0);
	};

	Tikel() {
	    return this.getToken(HisyeoParser.Tikel, 0);
	};

	Tulkolyun() {
	    return this.getToken(HisyeoParser.Tulkolyun, 0);
	};

	Tut() {
	    return this.getToken(HisyeoParser.Tut, 0);
	};

	Cok() {
	    return this.getToken(HisyeoParser.Cok, 0);
	};

	Cosni() {
	    return this.getToken(HisyeoParser.Cosni, 0);
	};

	Conzodo() {
	    return this.getToken(HisyeoParser.Conzodo, 0);
	};

	Colot() {
	    return this.getToken(HisyeoParser.Colot, 0);
	};

	Counton() {
	    return this.getToken(HisyeoParser.Counton, 0);
	};

	Cokyen() {
	    return this.getToken(HisyeoParser.Cokyen, 0);
	};

	Cot() {
	    return this.getToken(HisyeoParser.Cot, 0);
	};

	Comel() {
	    return this.getToken(HisyeoParser.Comel, 0);
	};

	Conkok() {
	    return this.getToken(HisyeoParser.Conkok, 0);
	};

	Centik() {
	    return this.getToken(HisyeoParser.Centik, 0);
	};

	Cenci() {
	    return this.getToken(HisyeoParser.Cenci, 0);
	};

	Cenbo() {
	    return this.getToken(HisyeoParser.Cenbo, 0);
	};

	Cifulo() {
	    return this.getToken(HisyeoParser.Cifulo, 0);
	};

	Cies() {
	    return this.getToken(HisyeoParser.Cies, 0);
	};

	Cienxin() {
	    return this.getToken(HisyeoParser.Cienxin, 0);
	};

	Cinobu() {
	    return this.getToken(HisyeoParser.Cinobu, 0);
	};

	Cinzon() {
	    return this.getToken(HisyeoParser.Cinzon, 0);
	};

	Cunyu() {
	    return this.getToken(HisyeoParser.Cunyu, 0);
	};

	Cuti() {
	    return this.getToken(HisyeoParser.Cuti, 0);
	};

	Cubu() {
	    return this.getToken(HisyeoParser.Cubu, 0);
	};

	Cuxien() {
	    return this.getToken(HisyeoParser.Cuxien, 0);
	};

	Cunfu() {
	    return this.getToken(HisyeoParser.Cunfu, 0);
	};

	Sohou() {
	    return this.getToken(HisyeoParser.Sohou, 0);
	};

	Sokol() {
	    return this.getToken(HisyeoParser.Sokol, 0);
	};

	Sodolun() {
	    return this.getToken(HisyeoParser.Sodolun, 0);
	};

	Sodilu() {
	    return this.getToken(HisyeoParser.Sodilu, 0);
	};

	Sobuni() {
	    return this.getToken(HisyeoParser.Sobuni, 0);
	};

	Sofin() {
	    return this.getToken(HisyeoParser.Sofin, 0);
	};

	Sonkon() {
	    return this.getToken(HisyeoParser.Sonkon, 0);
	};

	Sonti() {
	    return this.getToken(HisyeoParser.Sonti, 0);
	};

	Sonsus() {
	    return this.getToken(HisyeoParser.Sonsus, 0);
	};

	Soltustik() {
	    return this.getToken(HisyeoParser.Soltustik, 0);
	};

	Sondonos() {
	    return this.getToken(HisyeoParser.Sondonos, 0);
	};

	Selbo() {
	    return this.getToken(HisyeoParser.Selbo, 0);
	};

	Siokbi() {
	    return this.getToken(HisyeoParser.Siokbi, 0);
	};

	Senzo() {
	    return this.getToken(HisyeoParser.Senzo, 0);
	};

	Sinexis() {
	    return this.getToken(HisyeoParser.Sinexis, 0);
	};

	Sumon() {
	    return this.getToken(HisyeoParser.Sumon, 0);
	};

	Sunbulno() {
	    return this.getToken(HisyeoParser.Sunbulno, 0);
	};

	Sunyotni() {
	    return this.getToken(HisyeoParser.Sunyotni, 0);
	};

	Suit() {
	    return this.getToken(HisyeoParser.Suit, 0);
	};

	Xoinbo() {
	    return this.getToken(HisyeoParser.Xoinbo, 0);
	};

	Subol() {
	    return this.getToken(HisyeoParser.Subol, 0);
	};

	Xobek() {
	    return this.getToken(HisyeoParser.Xobek, 0);
	};

	Xonluk() {
	    return this.getToken(HisyeoParser.Xonluk, 0);
	};

	Xowose() {
	    return this.getToken(HisyeoParser.Xowose, 0);
	};

	Xolxili() {
	    return this.getToken(HisyeoParser.Xolxili, 0);
	};

	Xoboi() {
	    return this.getToken(HisyeoParser.Xoboi, 0);
	};

	Xon() {
	    return this.getToken(HisyeoParser.Xon, 0);
	};

	Xecinoc() {
	    return this.getToken(HisyeoParser.Xecinoc, 0);
	};

	Xentil() {
	    return this.getToken(HisyeoParser.Xentil, 0);
	};

	Xisu() {
	    return this.getToken(HisyeoParser.Xisu, 0);
	};

	Xiko() {
	    return this.getToken(HisyeoParser.Xiko, 0);
	};

	Xidetli() {
	    return this.getToken(HisyeoParser.Xidetli, 0);
	};

	Xulmindo() {
	    return this.getToken(HisyeoParser.Xulmindo, 0);
	};

	Xiyocu() {
	    return this.getToken(HisyeoParser.Xiyocu, 0);
	};

	Dohil() {
	    return this.getToken(HisyeoParser.Dohil, 0);
	};

	Dode() {
	    return this.getToken(HisyeoParser.Dode, 0);
	};

	Dondun() {
	    return this.getToken(HisyeoParser.Dondun, 0);
	};

	Dokcon() {
	    return this.getToken(HisyeoParser.Dokcon, 0);
	};

	Didozu() {
	    return this.getToken(HisyeoParser.Didozu, 0);
	};

	Dile() {
	    return this.getToken(HisyeoParser.Dile, 0);
	};

	Dukwelit() {
	    return this.getToken(HisyeoParser.Dukwelit, 0);
	};

	Dusul() {
	    return this.getToken(HisyeoParser.Dusul, 0);
	};

	Dundon() {
	    return this.getToken(HisyeoParser.Dundon, 0);
	};

	Zomuni() {
	    return this.getToken(HisyeoParser.Zomuni, 0);
	};

	Zonubi() {
	    return this.getToken(HisyeoParser.Zonubi, 0);
	};

	Zoi() {
	    return this.getToken(HisyeoParser.Zoi, 0);
	};

	Zelen() {
	    return this.getToken(HisyeoParser.Zelen, 0);
	};

	Zensi() {
	    return this.getToken(HisyeoParser.Zensi, 0);
	};

	Zigil() {
	    return this.getToken(HisyeoParser.Zigil, 0);
	};

	Ziwit() {
	    return this.getToken(HisyeoParser.Ziwit, 0);
	};

	Zingu() {
	    return this.getToken(HisyeoParser.Zingu, 0);
	};

	Zilyois() {
	    return this.getToken(HisyeoParser.Zilyois, 0);
	};

	Botyoto() {
	    return this.getToken(HisyeoParser.Botyoto, 0);
	};

	Botuk() {
	    return this.getToken(HisyeoParser.Botuk, 0);
	};

	Bodi() {
	    return this.getToken(HisyeoParser.Bodi, 0);
	};

	Bono() {
	    return this.getToken(HisyeoParser.Bono, 0);
	};

	Bomoge() {
	    return this.getToken(HisyeoParser.Bomoge, 0);
	};

	Bongosi() {
	    return this.getToken(HisyeoParser.Bongosi, 0);
	};

	Bonoxo() {
	    return this.getToken(HisyeoParser.Bonoxo, 0);
	};

	Bolute() {
	    return this.getToken(HisyeoParser.Bolute, 0);
	};

	Bolimot() {
	    return this.getToken(HisyeoParser.Bolimot, 0);
	};

	Boyok() {
	    return this.getToken(HisyeoParser.Boyok, 0);
	};

	Belisis() {
	    return this.getToken(HisyeoParser.Belisis, 0);
	};

	Besu() {
	    return this.getToken(HisyeoParser.Besu, 0);
	};

	Bilit() {
	    return this.getToken(HisyeoParser.Bilit, 0);
	};

	Bikonte() {
	    return this.getToken(HisyeoParser.Bikonte, 0);
	};

	Bicuon() {
	    return this.getToken(HisyeoParser.Bicuon, 0);
	};

	Bibok() {
	    return this.getToken(HisyeoParser.Bibok, 0);
	};

	Bisu() {
	    return this.getToken(HisyeoParser.Bisu, 0);
	};

	Binhun() {
	    return this.getToken(HisyeoParser.Binhun, 0);
	};

	Bilus() {
	    return this.getToken(HisyeoParser.Bilus, 0);
	};

	But() {
	    return this.getToken(HisyeoParser.But, 0);
	};

	Buku() {
	    return this.getToken(HisyeoParser.Buku, 0);
	};

	Bunxin() {
	    return this.getToken(HisyeoParser.Bunxin, 0);
	};

	Bundu() {
	    return this.getToken(HisyeoParser.Bundu, 0);
	};

	Bugot() {
	    return this.getToken(HisyeoParser.Bugot, 0);
	};

	Busin() {
	    return this.getToken(HisyeoParser.Busin, 0);
	};

	Buihi() {
	    return this.getToken(HisyeoParser.Buihi, 0);
	};

	Budiko() {
	    return this.getToken(HisyeoParser.Budiko, 0);
	};

	Bulo() {
	    return this.getToken(HisyeoParser.Bulo, 0);
	};

	Buslu() {
	    return this.getToken(HisyeoParser.Buslu, 0);
	};

	Fonfuk() {
	    return this.getToken(HisyeoParser.Fonfuk, 0);
	};

	Fonmot() {
	    return this.getToken(HisyeoParser.Fonmot, 0);
	};

	Fogicin() {
	    return this.getToken(HisyeoParser.Fogicin, 0);
	};

	Felkono() {
	    return this.getToken(HisyeoParser.Felkono, 0);
	};

	Folni() {
	    return this.getToken(HisyeoParser.Folni, 0);
	};

	Felcin() {
	    return this.getToken(HisyeoParser.Felcin, 0);
	};

	Fildonbun() {
	    return this.getToken(HisyeoParser.Fildonbun, 0);
	};

	Fiectu() {
	    return this.getToken(HisyeoParser.Fiectu, 0);
	};

	Fiki() {
	    return this.getToken(HisyeoParser.Fiki, 0);
	};

	Ficwo() {
	    return this.getToken(HisyeoParser.Ficwo, 0);
	};

	Fimosyos() {
	    return this.getToken(HisyeoParser.Fimosyos, 0);
	};

	Fitikos() {
	    return this.getToken(HisyeoParser.Fitikos, 0);
	};

	Funsut() {
	    return this.getToken(HisyeoParser.Funsut, 0);
	};

	Funlit() {
	    return this.getToken(HisyeoParser.Funlit, 0);
	};

	Funbetsi() {
	    return this.getToken(HisyeoParser.Funbetsi, 0);
	};

	Moskul() {
	    return this.getToken(HisyeoParser.Moskul, 0);
	};

	Moziko() {
	    return this.getToken(HisyeoParser.Moziko, 0);
	};

	Moxo() {
	    return this.getToken(HisyeoParser.Moxo, 0);
	};

	Momoki() {
	    return this.getToken(HisyeoParser.Momoki, 0);
	};

	Montuksol() {
	    return this.getToken(HisyeoParser.Montuksol, 0);
	};

	Mokwon() {
	    return this.getToken(HisyeoParser.Mokwon, 0);
	};

	Mocibo() {
	    return this.getToken(HisyeoParser.Mocibo, 0);
	};

	Mefus() {
	    return this.getToken(HisyeoParser.Mefus, 0);
	};

	Mofi() {
	    return this.getToken(HisyeoParser.Mofi, 0);
	};

	Metlios() {
	    return this.getToken(HisyeoParser.Metlios, 0);
	};

	Monbili() {
	    return this.getToken(HisyeoParser.Monbili, 0);
	};

	Meduson() {
	    return this.getToken(HisyeoParser.Meduson, 0);
	};

	Miou() {
	    return this.getToken(HisyeoParser.Miou, 0);
	};

	Mihuon() {
	    return this.getToken(HisyeoParser.Mihuon, 0);
	};

	Miteten() {
	    return this.getToken(HisyeoParser.Miteten, 0);
	};

	Mistu() {
	    return this.getToken(HisyeoParser.Mistu, 0);
	};

	Mile() {
	    return this.getToken(HisyeoParser.Mile, 0);
	};

	Muilo() {
	    return this.getToken(HisyeoParser.Muilo, 0);
	};

	Mixofo() {
	    return this.getToken(HisyeoParser.Mixofo, 0);
	};

	Muun() {
	    return this.getToken(HisyeoParser.Muun, 0);
	};

	Mukno() {
	    return this.getToken(HisyeoParser.Mukno, 0);
	};

	Mustokin() {
	    return this.getToken(HisyeoParser.Mustokin, 0);
	};

	Muncu() {
	    return this.getToken(HisyeoParser.Muncu, 0);
	};

	Mulu() {
	    return this.getToken(HisyeoParser.Mulu, 0);
	};

	Nokdo() {
	    return this.getToken(HisyeoParser.Nokdo, 0);
	};

	Mufeu() {
	    return this.getToken(HisyeoParser.Mufeu, 0);
	};

	No() {
	    return this.getToken(HisyeoParser.No, 0);
	};

	Nexe() {
	    return this.getToken(HisyeoParser.Nexe, 0);
	};

	Nebu() {
	    return this.getToken(HisyeoParser.Nebu, 0);
	};

	Nendol() {
	    return this.getToken(HisyeoParser.Nendol, 0);
	};

	Neos() {
	    return this.getToken(HisyeoParser.Neos, 0);
	};

	Nexodi() {
	    return this.getToken(HisyeoParser.Nexodi, 0);
	};

	Nelo() {
	    return this.getToken(HisyeoParser.Nelo, 0);
	};

	Nikful() {
	    return this.getToken(HisyeoParser.Nikful, 0);
	};

	Niok() {
	    return this.getToken(HisyeoParser.Niok, 0);
	};

	Niecni() {
	    return this.getToken(HisyeoParser.Niecni, 0);
	};

	Nungo() {
	    return this.getToken(HisyeoParser.Nungo, 0);
	};

	Nulto() {
	    return this.getToken(HisyeoParser.Nulto, 0);
	};

	Nubuso() {
	    return this.getToken(HisyeoParser.Nubuso, 0);
	};

	Nulun() {
	    return this.getToken(HisyeoParser.Nulun, 0);
	};

	Wohi() {
	    return this.getToken(HisyeoParser.Wohi, 0);
	};

	Wodino() {
	    return this.getToken(HisyeoParser.Wodino, 0);
	};

	Wonkuk() {
	    return this.getToken(HisyeoParser.Wonkuk, 0);
	};

	Welto() {
	    return this.getToken(HisyeoParser.Welto, 0);
	};

	Winit() {
	    return this.getToken(HisyeoParser.Winit, 0);
	};

	Wixes() {
	    return this.getToken(HisyeoParser.Wixes, 0);
	};

	Wuktomu() {
	    return this.getToken(HisyeoParser.Wuktomu, 0);
	};

	Wili() {
	    return this.getToken(HisyeoParser.Wili, 0);
	};

	Lohot() {
	    return this.getToken(HisyeoParser.Lohot, 0);
	};

	Losol() {
	    return this.getToken(HisyeoParser.Losol, 0);
	};

	Londuluk() {
	    return this.getToken(HisyeoParser.Londuluk, 0);
	};

	Loc() {
	    return this.getToken(HisyeoParser.Loc, 0);
	};

	Legefu() {
	    return this.getToken(HisyeoParser.Legefu, 0);
	};

	Lefotol() {
	    return this.getToken(HisyeoParser.Lefotol, 0);
	};

	Lionxin() {
	    return this.getToken(HisyeoParser.Lionxin, 0);
	};

	Liule() {
	    return this.getToken(HisyeoParser.Liule, 0);
	};

	Litiwe() {
	    return this.getToken(HisyeoParser.Litiwe, 0);
	};

	Lis() {
	    return this.getToken(HisyeoParser.Lis, 0);
	};

	Lito() {
	    return this.getToken(HisyeoParser.Lito, 0);
	};

	Luko() {
	    return this.getToken(HisyeoParser.Luko, 0);
	};

	Lucik() {
	    return this.getToken(HisyeoParser.Lucik, 0);
	};

	Lunti() {
	    return this.getToken(HisyeoParser.Lunti, 0);
	};

	Youmok() {
	    return this.getToken(HisyeoParser.Youmok, 0);
	};

	Yobe() {
	    return this.getToken(HisyeoParser.Yobe, 0);
	};

	Yonlus() {
	    return this.getToken(HisyeoParser.Yonlus, 0);
	};

	Youli() {
	    return this.getToken(HisyeoParser.Youli, 0);
	};

	Yumon() {
	    return this.getToken(HisyeoParser.Yumon, 0);
	};

	Yinsuk() {
	    return this.getToken(HisyeoParser.Yinsuk, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterRawModifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitRawModifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitRawModifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConnectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HisyeoParser.RULE_connector;
    }

	En() {
	    return this.getToken(HisyeoParser.En, 0);
	};

	Un() {
	    return this.getToken(HisyeoParser.Un, 0);
	};

	Bine() {
	    return this.getToken(HisyeoParser.Bine, 0);
	};

	Lekin() {
	    return this.getToken(HisyeoParser.Lekin, 0);
	};

	Yodo() {
	    return this.getToken(HisyeoParser.Yodo, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.enterConnector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HisyeoParserListener ) {
	        listener.exitConnector(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HisyeoParserVisitor ) {
	        return visitor.visitConnector(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




HisyeoParser.SentencesContext = SentencesContext; 
HisyeoParser.SentencePunctuationContext = SentencePunctuationContext; 
HisyeoParser.SentenceContext = SentenceContext; 
HisyeoParser.RestrictedSentenceContext = RestrictedSentenceContext; 
HisyeoParser.FreeAgentConstituentContext = FreeAgentConstituentContext; 
HisyeoParser.ConstituentContext = ConstituentContext; 
HisyeoParser.AdjectivalClauseContext = AdjectivalClauseContext; 
HisyeoParser.AdjectivalNucleusContext = AdjectivalNucleusContext; 
HisyeoParser.SubordinateClauseContext = SubordinateClauseContext; 
HisyeoParser.TransitiveVerbContext = TransitiveVerbContext; 
HisyeoParser.QuantityContext = QuantityContext; 
HisyeoParser.PrepParticleContext = PrepParticleContext; 
HisyeoParser.NounPhraseContext = NounPhraseContext; 
HisyeoParser.VerbalNounPhraseContext = VerbalNounPhraseContext; 
HisyeoParser.PrepPhraseContext = PrepPhraseContext; 
HisyeoParser.NominalNucleusContext = NominalNucleusContext; 
HisyeoParser.VerbalParticlesContext = VerbalParticlesContext; 
HisyeoParser.VerbalNounContext = VerbalNounContext; 
HisyeoParser.VerbMarkerContext = VerbMarkerContext; 
HisyeoParser.VerbModifierContext = VerbModifierContext; 
HisyeoParser.InterjectionContext = InterjectionContext; 
HisyeoParser.ContentParticlesContext = ContentParticlesContext; 
HisyeoParser.BaseNounContext = BaseNounContext; 
HisyeoParser.BaseModifierContext = BaseModifierContext; 
HisyeoParser.RelativeQuantityContext = RelativeQuantityContext; 
HisyeoParser.NominalQuantityContext = NominalQuantityContext; 
HisyeoParser.PostpositionContext = PostpositionContext; 
HisyeoParser.PronounContext = PronounContext; 
HisyeoParser.RawVerbsContext = RawVerbsContext; 
HisyeoParser.RawNounsContext = RawNounsContext; 
HisyeoParser.RawModifiersContext = RawModifiersContext; 
HisyeoParser.ConnectorContext = ConnectorContext; 
